Efficient Gradient-Based Inference through
Transformations between Bayes Nets and Neural Nets

Diederik P. Kingma
Max Welling
Machine Learning Group, University of Amsterdam

Abstract
Hierarchical Bayesian networks and neural networks with stochastic hidden units are commonly
perceived as two separate types of models. We
show that either of these types of models can often be transformed into an instance of the other,
by switching between centered and differentiable
non-centered parameterizations of the latent variables. The choice of parameterization greatly influences the efficiency of gradient-based posterior inference; we show that they are often complementary to eachother, we clarify when each
parameterization is preferred and show how inference can be made robust. In the non-centered
form, a simple Monte Carlo estimator of the
marginal likelihood can be used for learning the
parameters. Theoretical results are supported by
experiments.

1. Introduction
Bayesian networks (also called belief networks) are probabilistic graphical models where the conditional dependencies within a set of random variables are described by a
directed acyclic graph (DAG). Many supervised and unsupervised models can be considered as special cases of
Bayesian networks.
In this paper we focus on the problem of efficient inference in Bayesian networks with multiple layers of continuous latent variables, where exact posterior inference is intractable (e.g. the conditional dependencies between variables are nonlinear) but the joint distribution is differentiable. Algorithms for approximate inference in Bayesian
networks can be roughly divided into two categories: sampling approaches and parametric approaches. Parametric
approaches include Belief Propagation (Pearl, 1982) or the
Proceedings of the 31 st International Conference on Machine
Learning, Beijing, China, 2014. JMLR: W&CP volume 32. Copyright 2014 by the author(s).

D . P. KINGMA @ UVA . NL
M . WELLING @ UVA . NL

more recent Expectation Propagation (EP) (Minka, 2001).
When it is not reasonable or possible to make assumptions
about the posterior (which is often the case), one needs
to resort to sampling approaches such as Markov Chain
Monte Carlo (MCMC) (Neal, 1993). In high-dimensional
spaces, gradient-based samplers such as Hybrid Monte
Carlo (Duane et al., 1987) and the recently proposed noU-turn sampler (Hoffman & Gelman, 2011) are known for
their relatively fast mixing properties. When just interested
in finding a mode of the posterior, vanilla gradient-based
optimization methods can be used. The alternative parameterizations suggested in this paper can dramatically improve the efficiency of any of these algorithms.
1.1. Outline of the paper
After reviewing background material in 2, we introduce
a generally applicable differentiable reparameterization
of continuous latent variables into a differentiable noncentered form in section 3. In section 4 we analyze the
posterior dependencies in this reparameterized form. Experimental results are shown in section 6.

2. Background
Notation. We use bold lower case (e.g. x or y) notation
for random variables and instantiations (values) of random
variables. We write pθ (x|y) and pθ (x) to denote (conditional) probability density (PDF) or mass (PMF) functions
of variables. With θ we denote the vector containing all
parameters; each distribution in the network uses a subset
of θ’s elements. Sets of variables are capitalized and bold,
matrices are capitalized and bold, and vectors are written
in bold and lower case.
2.1. Bayesian networks
A Bayesian network models a set of random variables V
and their conditional dependencies as a directed acyclic
graph, where each variable corresponds to a vertex and
each edge to a conditional dependency. Let the distribu-

Transformations between Bayes Nets and Neural Nets

variables can be easily acquired using the equality:

j

∇z log pθ (z|x) = ∇z log pθ (x, z)
···

zj

···

zj

···

(a)

···

Figure 1. (a) The centered parameterization (CP) of a latent variable zj . (b) The differentiable non-centered parameterization
(DNCP) where we have introduced an auxiliary ’noise’ variable j ∼ pθ (j ) such that zj becomes deterministic: zj =
gj (paj , j , θ). This deterministic variable has an interpretation
of a hidden layer in a neural network, which can be differentiated
efficiently using the backpropagation algorithm.

tion of each variable vj be pθ (vj |paj ), where we condition on vj ’s (possibly empty) set of parents paj . Given
the factorization property of Bayesian networks, the joint
distribution over all variables is simply:
N
Y
j=1

pθ (vj |paj )

N
X
j=1

(b)

pθ (v1 , . . . , vN ) =

=

(1)

∇z log pθ (vj |paj )

(3)

In words, the gradient of the log-posterior w.r.t. the latent
variables is simply the sum of gradients of individual factors w.r.t. the latent variables. These gradients can then be
followed to a mode if one is interested in finding a MAP
solution. If one is interested in sampling from the posterior then the gradients can be plugged into a gradient-based
sampler such as Hybrid Monte Carlo (Duane et al., 1987);
if also interested in learning parameters, the resulting samples can be used for the E-step in Monte Carlo EM (Wei &
Tanner, 1990) (MCEM).
Problems arise when strong posterior dependencies exist
between latent variables. From eq. (3) we can see that the
Hessian H of the posterior is:
H = ∇z ∇Tz log pθ (z|x) =

N
X
j=1

∇z ∇Tz log pθ (vj |paj )
(4)

Let the graph consist of one or more (discrete or continuous) observed variables xj and continuous latent variables zj , with corresponding conditional distributions
pθ (xj |paj ) and pθ (zj |paj ). We focus Ron the case where
both the marginal likelihood pθ (x) = z pθ (x, z) dz and
the posterior pθ (z|x) are intractable to compute or differentiate directly w.r.t. θ (which is true in general), and where
the joint distribution pθ (x, z) is at least once differentiable,
so it is still possible to efficiently compute first-order partial
derivatives ∇θ log pθ (x, z) and ∇z log pθ (x, z).
2.2. Conditionally deterministic variables
A conditionally deterministic variable vj with parents paj
is a variable whose value is a (possibly nonlinear) deterministic function gj (.) of the parents and the parameters:
vj = gj (paj , θ). The PDF of a conditionally deterministic variable is a Dirac delta function, which we define as a
Gaussian PDF N (.; µ, σ) with infinitesimal σ:
pθ (vj |paj ) = lim N (vj ; gj (paj , θ), σ)
σ→0

(2)

Suppose a factor log pθ (zi |zj ) connecting two scalar latent
variables zi and zj exists, and zi is strongly dependent on
2
pθ (z|x)
zj , then the Hessian’s corresponding element ∂ log
∂zi ∂zj
will have a large (positive or negative) value. This is bad
for gradient-based inference since it means that changes
∂ log pθ (zi |zj )
in zj have a large effect on the gradient
∂zi
and changes in zi have a large effect on the gradient
∂ log pθ (zi |zj )
. In general, strong conditional dependencies
∂zj
lead to ill-conditioning of the posterior, resulting in smaller
optimal stepsizes for first-order gradient-based optimization or sampling methods, making inference less efficient.

3. The differentiable non-centered
parameterization (DNCP)
In this section we introduce a generally applicable transformation between continuous latent random variables and
deterministic units with auxiliary parent variables. In rest
of the paper we analyze its ramifications for gradient-based
inference.

which equals +∞ when Rvj = gj (paj , θ) and equals 0
everywhere else such that vj pθ (vj |paj ) dvj = 1.

3.1. Parameterizations of latent variables

2.3. Inference problem under consideration

Let zj be some continuous latent variable with parents paj ,
and corresponding conditional PDF:

We are often interested in performing posterior inference,
which most frequently consists of either optimization (finding a mode argmaxz pθ (z|x)) or sampling from the posterior pθ (z|x). Gradients of the log-posterior w.r.t. the latent

zj |paj ∼ pθ (zj |paj )

(5)

This is also known in the statistics literature as the centered
parameterization (CP) of the latent variable zj . Let the

Transformations between Bayes Nets and Neural Nets

differentiable non-centered parameterization (DNCP) of
the latent variable zj be:
zj = gj (paj , j , θ) where

j ∼ p(j )

(6)

where gj (.) is some differentiable function. Note that in
the DNCP, the value of zj is deterministic given both paj
and the newly introduced auxiliary variable j which is distributed as p(j ). See figure 1 for an illustration of the two
parameterizations.
By the change of variables, the relationship between the
original PDF pθ (zj |paj ), the function gj (paj , j ) and the
PDF p(j ) is:
p(j ) = pθ (zj = gj (paj , j , θ)|paj ) |det(J)|

(7)

where det(J) is the determinant of Jacobian of gj (.) w.r.t.
j . If zj is a scalar variable, then j is also scalar and
∂z
|det(J)| = | ∂jj |.
In the DNCP, the original latent variable zj has become
deterministic, and its PDF pθ (zj |paj , j ) can be described
as a Dirac delta function (see section 2.2).
The joint PDF over the random and deterministic variables
can be integrated w.r.t. the determinstic variables. If for
simplicity we assume that observed variables are always
leaf nodes of the network, and that all latent variables are
reparameterized such that the only random variables left
are the observed and auxiliary variables x and , then the
marginal joint pθ (x, ) is obtained as follows:
Z
pθ (x, ) = pθ (x, z, ) dz
Z Y z
Y
Y
=
pθ (xj |paj )
pθ (zj |paj , j )
p(j ) dz
z j

=

Y

=

Y

j

j

j

pθ (xj |paj )

Y

pθ (xj |paj )

Y

where

p(j )

2. For any ”location-scale” family of distributions (with
differentiable log-PDF) we can choose the standard
distribution (with location = 0, scale = 1) as the auxiliary variable j , and let gj (.) = location + scale · j .
Examples: Gaussian, Uniform, Laplace, Elliptical,
Student’s t, Logistic and Triangular distributions.
3. Composition: It is often possible to express variables
as functions of component variables with different
distributions. Examples: Log-Normal (exponentiation of normally distributed variable), Gamma (a sum
over exponentially distributed variables), Beta distribution, Chi-Squared, F distribution and Dirichlet distributions.
When the distribution is not in the families above, accurate differentiable approximations to the inverse CDF can
be constructed, e.g. based on polynomials, with time complexity comparable to the CP (see e.g. (Devroye, 1986) for
some methods).
For the exact approaches above, the CP and DNCP forms
have equal time complexities. In practice, the difference in
CPU time depends on the relative complexity of computing
derivatives of log pθ (zj |paj ) versus computing gj (.) and
derivatives of log p(j ), which can be easily verified to be
similar in most cases below. Iterations with the DNCP form
were slightly faster in our experiments.
3.3. DNCP and neural networks

j

Z Y
z j

j

F −1 (zj |paj ; θ) be the inverse CDF of the conditional
distribution. Examples: Exponential, Cauchy, Logistic, Rayleigh, Pareto, Weibull, Reciprocal, Gompertz,
Gumbel and Erlang distributions.

pθ (zj |paj , j ) dz

p(j )

j

zk = gk (pak , k , θ)
(8)

In the last step of eq. (8), the inputs paj to the factors of observed variables pθ (xj |paj ) are defined in terms of functions zk = gk (.), whose values are all recursively computed from auxiliary variables .
3.2. Approaches to DNCPs
There are a few basic approaches to transforming CP of a
latent variable zj to a DNCP:
1. Tractable and differentiable inverse CDF. In this
case, let j ∼ U(0, 1), and let gj (zj , paj , θ) =

It is instructive to interpret the DNCP form of latent variables as ”hidden units” of a neural network. The network
of hidden units together form a neural network with inserted noise , which we can differentiate efficiently using
the backpropagation algorithm (Rumelhart et al., 1986).
There has been recent increase in popularity of deep neural networks with stochastic hidden units (e.g. (Krizhevsky
et al., 2012; Goodfellow et al., 2013; Bengio, 2013)). Often, the parameters θ of such neural networks are optimized towards maximum-likelihood objectives. In that
case, the neural network can be interpreted as a probabilistic model log pθ (t|x, ) computing a conditional distribution over some target variable t (e.g. classes) given some
input x. In (Bengio & Thibodeau-Laufer, 2013), stochastic hidden units are used for learning the parameters of
a Markov chain transition operator that samples from the
data distribution.
For example, in (Hinton et al., 2012) a ’dropout’ regularization method is introduced where (in its basic ver-

Transformations between Bayes Nets and Neural Nets

sion) the activation of hidden units zj is computed as zj =
j · f (paj ) with j ∼ p(j ) = Bernoulli(0.5), and where
the parameters are learned by following
 the gradient of the

log-likelihood lower bound: ∇θ E log pθ (t(i) |x(i) , ) ;
this gradient can sometimes be computed exactly (Maaten
et al., 2013) and can otherwise be approximated with a
Monte Carlo estimate (Hinton et al., 2012). The two parameterizations explained in section 3.1 offer us a useful
new perspective on ’dropout’. A ’dropout’ hidden unit
(together with its injected noise ) can be seen as the
DNCP of latent random variables, whose CP is zj |paj ∼
pθ (zj = j · f (paj )|paj )). A practical implication is that
’dropout’-type neural networks can therefore be interpreted
and treated as hierarchical Bayes nets, which opens the
door to alternative approaches to learning the parameters,
such as Monte Carlo EM or variational methods.
While ’dropout’ is designed as a regularization method,
other work on stochastic neural networks exploit the
power of stochastic hidden units for generative modeling,
e.g. (Frey & Hinton, 1999; Rezende et al., 2014; Tang &
Salakhutdinov, 2013) applying (partially) MCMC or (partically) factorized variational approaches to modelling the
posterior. As we will see in sections 4 and 6, the choice
of parameterization has a large impact on the posterior dependencies and the efficiency of posterior inference. However, current publications lack a good justification for their
choice of parameterization. The analysis in section 4 offers some important insight in where the centered or noncentered parameterizations of such networks are more appropriate.

1

2

3

z1

z2

z3

z1

z2

z3

x1

x2

x3

x1

x2

x3

(a)

(b)

Figure 2. (a) An illustrative hierarchical model in its centered parameterization (CP). (b) The differentiable non-centered parameterization (DNCP), where z1 = g1 (1 , θ), z2 = g2 (z1 , 2 , θ)
and z3 = g3 (z2 , 3 , θ), with auxiliary latent variables k ∼
pθ (k ). The DNCP exposes a neural network within the hierarchical model, which we can differentiate efficiently using backpropagation.

Table 1. Limiting behaviour of squared correlations between z
and its parent yi when z is in the centered (CP) and non-centered
(DNCP) parameterizaton.
ρ2yi ,z (CP)

ρ2yi ,e (DNCP)

limσ→0

1

0

limσ→+∞

0

βwi2
βwi2 +α

limβ→0
limβ→−∞
limα→0
limα→−∞

wi2
wi2 −ασ 2

0

0
1

1
1−βσ 2

βσ 2
βσ 2 −1

0

0

3.4. A differentiable MC likelihood estimator
We showed that many hierarchical continuous latentvariable models can be transformed into a DNCP pθ (x, ),
where all latent variables (the introduced auxiliary variables ) are root nodes (see eq. (8)). This has an important
implication for learning since (contrary to a CP) the DNCP
can be used to form a differentiable Monte Carlo estimator
of the marginal likelihood:
L

1 XY
(l)
pθ (xj |paj )
log pθ (x) ' log
L
j
l=1

(l)

where the parents paj of the observed variables are either root nodes or functions of root nodes whose values
are sampled from their marginal: (l) ∼ p(). This MC
estimator can be differentiated w.r.t. θ to obtain an MC estimate of the log-likelihood gradient ∇θ log pθ (x), which
can be plugged into stochastic optimization methods such
as Adagrad for approximate ML or MAP. When performed
one datapoint at a time, we arrive at our on-line Maximum
Monte Carlo Likelihood (MMCL) algorithm.

4. Effects of parameterizations on posterior
dependencies
What is the effect of the proposed reparameterization on the
efficiency of inference? If the latent variables have linearGaussian conditional distributions, we can use the metric
of squared correlation between the latent variable and any
of its children in their posterior distribution. If after reparameterization the squared correlation is decreased, then in
general this will also result in more efficient inference.
For non-linear Gaussian conditional distributions, the logPDF can be locally approximated as a linear-Gaussian using a second-order Taylor expansion. Results derived for
the linear case can therefore also be applied to the nonlinear case; the correlation computed using this approximation is a local dependency between the two variables.
Denote by z a scalar latent variable we are going to reparameterize, and by y its parents, where yi is one of the
parents. The log-PDF of the corresponding conditional dis-

Transformations between Bayes Nets and Neural Nets

the equation above, the squared correlation can be computed from the elements of the Hessian matrix:

σz = 0.02 (ρ ≈ 1.00)

z2

σz = 1 (ρ ≈ 0.41)

z2

z2

σz = 50 (ρ ≈ 0.00)

2
2 2
ρ2 = (σAB
)2 /(σA
σB )

= (HAB /det(H))2 /((−HA /det(H))(−HB /det(H))
z1
σz = 0.02 (ρ ≈ −0.01)

2
= HAB
/(HA HB )

e1

e1

e1

H = ∇z ∇Tz log pθ (z|x) = ∇z ∇Tz log pθ (x, z)

Figure 3. Plots of the log-posteriors of the illustrative linearGaussian model discussed in sec. 4.4. Columns: different choices
of σz , ranging from a low prior dependency (σz = 50) to a high
prior dependency (σz = 0.02). First row: CP form. Second row:
DNCP form. The posterior correlation ρ between the variables
is also displayed. In the original form a larger prior dependency
leads to a larger posterior dependency (see top row). The dependency in the DNCP posterior is inversely related to the prior
dependency between z1 and z2 (bottom row).

z = the variable to be reparameterized
y = z’s parents
L(z) = log pθ (z|y) (z’s factor)
L

A reparameterization of z using an auxiliary variable  is
z = g(.) = (wT y + b) + σ where  ∼ N (0, 1). With (7)
it can be confirmed that this change of variables is correct:
 
 
 ∂z 
 ∂z 
pθ (z|y) ·   = pθ (z = g(.)|y) ·  
∂
∂
= N (wT y + b + σ|wT y + b, σ 2 ) · σz
√
= − exp(2 /2)/ 2π = N (0, 1)

= p()

∂ 2 L(\z)
∂yi ∂yi
∂ 2 L(z→)
β=
∂z∂z

4.1. Squared Correlations
4.1.1. C ENTERED CASE

(9)

The covariance C between two jointly Gaussian distributed
variables A and B equals the negative inverse of the Hessian matrix of the log-joint PDF:


= the factors of z’s children

In the CP case, the relevant Hessian elements are as follows:

First we will derive expressions for the squared correlations
between z and its parents, for the CP and DNCP case, and
subsequently show how they relate.

2
σAB
2
σB

(all factors minus z’s factor)

α=

= −(z − wT y − b)2 /(2σ 2 ) + constant

C=

L = log pθ (x, z) (sum of all factors)

(z→)

log pθ (z|y) = log N (z|wT y + b, σ 2 )

2
σA
2
σAB

The following shorthand notation is used in this section:

L(\z) = L − L(z)

tribution is



(10)

Important to note is that derivatives of the log-posterior
w.r.t. the latent variables are equal to the derivatives of logjoint w.r.t. the latent variables, therefore,

e2

e2

z1
σz = 1 (ρ ≈ −0.41)

e2

z1
σz = 50 (ρ ≈ −0.58)

−1

= −H

1
=
det(H)



−HB
HAB

HAB
−HA



The correlation ρ between two jointly Gaussian distributed
2
variables A and B is given by: ρ = σAB
/(σA σB ). Using

∂2L
∂ 2 L(z)
=α+
= α − wi2 /σ 2
∂yi ∂yi
∂yi ∂yi
∂2L
∂ 2 L(z)
=
=β+
= β − 1/σ 2
∂z∂z
∂z∂z
∂2L
∂ 2 L(z)
=
=
= wi /σ 2
(11)
∂yi ∂z
∂yi ∂z

Hyi yi =
Hzz
Hyi z

Therefore, using eq. (10), the squared correlation between
yi and z is:
ρ2yi ,z =

(Hyi z )2
wi2 /σ 4
=
Hyi yi Hzz
(α − wi2 /σ 2 )(β − 1/σ 2 )

(12)

Transformations between Bayes Nets and Neural Nets

4.1.2. N ON - CENTERED CASE

Table 2. Effective Sample Size (ESS) for different choices of
latent-variable variance σz , and for different samplers, after taking 4000 samples. Shown are the results for HMC samplers using
the CP and DNCP parameterizations, as well as a robust HMC
sampler.

In the DNCP case, the Hessian elements are:
∂ ∂L(z→)
∂2L
=α+
∂yi ∂yi
∂yi ∂yi


∂
∂L(z→)
=α+
wi
= α + wi2 β
∂yi
∂z

Hyi yi =

log σz

∂2L
∂ 2 L(z→)
∂ 2 log p()
=
+
= σ2 β − 1
∂∂
∂∂
∂∂
∂2L
=
= σwi β
(13)
∂yi ∂

H =
Hyi 

The squared correlation between yi and  is therefore:
ρ2yi , =

(Hyi  )2
σ 2 wi2 β 2
=
Hyi yi H
(α + wi2 β)(σ 2 β − 1)

(14)

4.2. Correlation inequality
We can now compare the squared correlation, between z
and some parent yi , before and after the reparameterization.
Assuming α < 0 and β < 0 (i.e. L(\z) and L(z→) are
concave, e.g. exponential families):
ρ2yi ,z > ρ2yi ,
wi2 /σ 4
σ 2 wi2 β 2
>
(α − wi2 /σ 2 )(β − 1/σ 2 )
(α + wi2 β)(σ 2 β − 1)
2
4
wi /σ
wi2 β 2
>
(α − wi2 /σ 2 )(β − 1/σ 2 )
(α + wi2 β)(β − 1/σ 2 )
4
β2
1/σ
>
(α − wi2 /σ 2 )
(α + wi2 β)
σ −2 > −β

(15)

Thus we have shown the surprising fact that the correlation inequality takes on an extremely simple form where
the parent-dependent values α and wi play no role; the inequality only depends on two properties of z: the relative
strenghts of σ (its noisiness) and β (its influence on children’s factors). Informally speaking, if the noisiness of z’s
conditional distribution is large enough compared to other
factors’ dependencies on z, then the reparameterized form
is beneficial for inference.
4.3. A beauty-and-beast pair
Additional insight into the properties of the CP and DNCP
can be gained by taking the limits of the squared correlations (12) and (14). Limiting behaviour of these correlations is shown in table 1. As becomes clear in these limits, the CP and DNCP often form a beauty-and-beast pair:
when posterior correlations are high in one parameterization, they are low in the other. This is especially true in the

-5
-4.5
-4
-3.5
-3
-2.5
-2
-1.5
-1

CP

DNCP

ROBUST

2
26
10
225
386
542
406
672
1460

305
348
570
417
569
608
972
1078
1600

640
498
686
624
596
900
935
918
1082

limits of σ → 0 and β → −∞, where squared correlations
converge to either 0 or 1, such that posterior inference will
be extremely inefficient in either CP or DNCP, but efficient
in the other. This difference in shapes of the log-posterior
is illustrated in figure 3.
4.4. Example: Simple Linear Dynamical System
Take a simple model with scalar latent variables z1
and z2 , and scalar observed variables x1 and x2 .
The joint PDF is defined as p(x1 , x2 , z1 , z2 ) =
p(z1 )p(x1 |z1 )p(z2 |z1 )p(x2 |z2 ), where p(z1 ) = N (0, 1),
p(x1 |z1 ) = N (z1 , σx2 ), p(z2 |z1 ) = N (z1 , σz2 ) and
p(x2 |z2 ) = N (z2 , σx2 ). Note that the parameter σz determines the dependency between the latent variables, and
σx determines the dependency between latent and observed
variables.
We reparameterize z2 such that it is conditionally deterministic given a new auxiliary variable 2 . Let p(2 ) =
N (0, 1). let z2 = g2 (z1 , 2 , σz ) = z1 + σz · 2 and let
1 = z1 . See figure 3 for plots of the original and auxiliary
posterior log-PDFs, for different choices of σz , along with
the resulting posterior correlation ρ.
For what choice of parameters does the reparameterization
yield smaller posterior correlation? We use equation (15)
and plug in σ ← σz and −β ← σx−2 , which results in:
ρ21 ,2 > ρ2z1 ,z2

⇒

σz2 < σx2

i.e. the posterior correlation in DNCP form ρ21 ,2 is smaller
when the latent-variable noise parameter σz2 is smaller than
the oberved-variable noise parameter σx2 . Less formally,
this means that the DNCP is preferred when the latent variable is more strongly coupled to the data (likelihood) then
to its parents.

Transformations between Bayes Nets and Neural Nets

pling is tractable, efficient sampling is possible by interleaving between centered and non-centered parameterizations, as was shown in (Yu & Meng, 2011).

4
3
2
1
0
−1
−2

0

500

1000

1500

1.0
0.8
0.6
0.4
0.2
0.0
2000 −600 −300

0

300

600

(a) Centered Parameterization (CP)

3
2
1
0
−1
−2
−3
−4

0

500

1000

(b) Differentiable
(DNCP)

1500

1.0
0.8
0.6
0.4
0.2
0.0
−0.2
2000 −600 −300

Non-Centered

Auxiliary variables are used for data augmentation (see
(Van Dyk & Meng, 2001) or slice sampling (Neal, 2003))
where, in contrast with our method, sampling is performed
in a higher-dimensional augmented space. Auxiliary variables are used in a similar form under the name exogenous variables in Structural Causal Models (SCMs) (Pearl,
2000). In SCMs the functional form of exogenous variables
is more restricted than our auxiliary variables. The concept
of conditionally deterministic variables has been used earlier in e.g. (Cobb & Shenoy, 2005), although not as a tool
for efficient inference in general Bayesian networks with
continuous latent variables. Recently, (Raiko et al., 2012)
analyzed the elements of the Hessian w.r.t. the parameters
in neural network context.
The differentiable reparameterization of latent variables in
this paper was introduced earlier in (Kingma & Welling,
2013) and independently in (Bengio, 2013), but these publications lacked a theoretic analysis of the impact on the
efficiency of inference. In (Kingma & Welling, 2013), the
reparameterization trick was used in an efficient algorithm
for stochastic variational inference and learning.

0

300

600

6. Experiments
Parameterization

Figure 4. Auto-correlation of HMC samples of the latent variables
for a DBN in two different parameterizations. Left on each figure are shown 2000 subsequent HMC samples of three randomly
chosen variables in the dynamic Bayesian network model. On the
right are shown the corresponding HMC sample auto-correlation
graphs. The DNCP resulted in much lower posterior dependencies and a dramatic drop in HMC sample auto-correlation.

5. Related work
This is, to the best of our knowledge, the first work to investigate the implications of the different differentiable noncentered parameterizations on the efficiency of gradientbased inference. However, the topic of centered vs noncentered parameterizations has been investigated for efficient (non-gradient based) Gibbs Sampling in work by Papaspiliopoulos et al. (2003; 2007), which also discusses
some strategies for constructing parameterization for those
cases. There have been some publications for parameterizations of specific models; (Gelfand et al., 1995), for example, discusses parameterizations of mixed models, and
(Meng & Van Dyk, 1998) investigate several rules for
choosing an appropriate parameterization for mixed-effects
models for faster EM. In the special case where Gibbs sam-

6.1. Nonlinear DBN
From the derived posterior correlations in the previous sections we can conclude that depending on the parameters of
the model, posterior sampling can be extremely inefficient
in one parameterization while it is efficient in the other.
When the parameters are known, one can choose the best
parameterization (w.r.t. posterior correlations) based on the
correlation inequality (15).
In practice, model parameters are often subject to change,
e.g. when optimizing the parameters with Monte Carlo
EM; in these situations where there is uncertainty over the
value of the model parameters, it is impossible to choose
the best parameterization in advance. The ”beauty-beast”
duality from section 4.3 suggests a solution in the form of
a very simple sampling strategy: mix the two parameterizations. Let QCP (z0 |z) be the MCMC/HMC proposal distribution based on pθ (z|x) (the CP), and let QDN CP (z0 |z)
be the proposal distribution based on pθ (|x) (the DNCP).
Then the new MCMC proposal distribution based on the
mixture is:
Q(z0 |z) = ρ · QCP (z0 |z) + (1 − ρ) · QDN CP (z0 |z)
(16)
where we use ρ = 0.5 in experiments. The mixing efficiency might be half that of the oracle solution (where the

Transformations between Bayes Nets and Neural Nets

We applied a Hybrid Monte Carlo (HMC) sampler to a
Dynamic Bayesian Network (DBN) with nonlinear transition probabilities with the same structure as the illustrative
model in figure 2. The prior and conditional probabilities are: z1 ∼ N (0, I), zt |zt−1 ∼ N (tanh(Wz zt−1 +
bz ), σz2 I) and xt |zt ∼ Bernoulli(sigmoid(Wx zt−1 )).
The parameters were intialized randomly by sampling from
N (0, I). Based on the derived limiting behaviour (see table 1, we can expect that such a network in CP can have
very large posterior correlations if the variance of the latent
variables σz2 is very small, resulting in slow sampling.
To validate this result, we performed HMC inference with
different values of σz2 , sampling the latent variables while
holding the parameters fixed. For HMC we used 10
leapfrog steps per sample, and the stepsize was automatically adjusted while sampling to obtain a HMC acceptance
rate of around 0.9. At each sampling run, the first 1000
HMC samples were thrown away (burn-in); the subsequent
4000 HMC samples were kept. To estimate the efficiency
of sampling, we computed the effective sample size (ESS);
see e.g. (Kass et al., 1998) for a discussion on ESS.
Results. See table 2 and figure 4 for results. It is clear that
the choice of parameterization has a large effect on posterior dependencies and the efficiency of inference. Sampling
was very inefficient for small values of σz in the CP, which
can be understood from the limiting behaviour in table 1.
6.2. Generative multilayer neural net
As explained in section 3.4, a hierarchical model in DNCP
form can be learned using a MC likelihood estimator which
can be differentiated and optimized w.r.t. the parameters
θ. We compare this Maximum Monte Carlo Likelihood
(MMCL) method with the MCEM method for learning the
parameters of a 4-layer hierarchical model of the MNIST
dataset, where x|z3 ∼ Bernoulli(sigmoid(Wx z3 + bx ))
and zt |zt−1 ∼ N (tanh(Wi zt−1 +bi ), σz2t I). For MCEM,
we used HMC with 10 leapfrog steps followed by a weight
update using Adagrad (Duchi et al., 2010). For MMCL,
we used L ∈ {10, 100, 500}. We observed that DNCP
was a better parameterization than CP in this case, in terms
of fast mixing. However, even in the DNCP, HMC mixed
very slowly when the dimensionality of latent space become too high. For this reason, z1 and z2 were given
a dimensionality of 3, while z3 was 100-dimensional but
noiseless (σz21 = 0) such that only z3 and z2 are random
variables that require posterior inference by sampling. The
model was trained on a small (1000 datapoints) and large
(50000 datapoints) version of the MNIST dataset.

−100
Marginal log-likelihood

optimal parameterization is known), nonetheless when taking into account the uncertainty over the parameters, the
expected efficiency of the mixture proposal can be better
than a single parameterization chosen ad hoc.

Ntrain = 1000

Ntrain = 50000
MCEM (train)
MCEM (test)
MMCL (500 samples) (train)
MMCL (500 samples) (test)
MMCL (10 samples) (train)
MMCL (10 samples) (test)
MMCL (100 samples) (train)
MMCL (100 samples) (test)

−150

−120

−160

−140

−170

−160

−180

−180
−200 0
10

−140

−190
101
102
Training time (× 5 minutes)

−200 0
10

101

102

Figure 5. Performance of MMCL versus MCEM in terms of the
marginal likelihood, when learning the parameters of a generative
multilayer neural network (see section 6.2).

Results. We compared train- and testset marginal likelihood. See figure 5 for experimental results. As was expected, MCEM attains asymptotically better results. However, despite its simplicity, the on-line nature of MMCL
means it scales better to large datasets, and (contrary to
MCEM) is trivial to implement.

7. Conclusion
We have shown how Bayesian networks with continuous
latent variables and generative neural networks are related
through two different parameterizations of the latent variables: CP and DNCP. A key result is that the differentiable
non-centered parameterization (DNCP) of a latent variable
is preferred, in terms of its effect on decreased posterior
correlations, when the variable is more strongly linked to
the data (likelihood) then to its parents. Through theoretical analysis we have also shown that the two parameterizations are complementary to each other: when posterior correlations are large in one form, they are small in the other.
We have also illustrated that this theoretical result can be
exploited in practice by designing a MCMC strategy that
mixes between both parameterizations, making it robust to
situations where MCMC can otherwise be inefficient.

Acknowledgments
The authors thank the reviewers for their excellent feedback and Joris Mooij, Ted Meeds and Taco Cohen for invaluable discussions and input.

Transformations between Bayes Nets and Neural Nets

References
Bengio, Yoshua. Estimating or propagating gradients through
stochastic neurons. arXiv preprint arXiv:1305.2982, 2013.
Bengio, Yoshua and Thibodeau-Laufer, Éric. Deep generative
stochastic networks trainable by backprop. arXiv preprint
arXiv:1306.1091, 2013.
Cobb, Barry R and Shenoy, Prakash P. Nonlinear deterministic
relationships in Bayesian networks. In Symbolic and Quantitative Approaches to Reasoning with Uncertainty, pp. 27–38.
Springer, 2005.
Devroye, Luc. Sample-based non-uniform random variate generation. In Proceedings of the 18th conference on Winter simulation, pp. 260–265. ACM, 1986.
Duane, Simon, Kennedy, Anthony D, Pendleton, Brian J, and
Roweth, Duncan. Hybrid Monte Carlo. Physics letters B, 195
(2):216–222, 1987.

Minka, Thomas P. Expectation propagation for approximate
bayesian inference. In Proceedings of the Seventeenth conference on Uncertainty in artificial intelligence, pp. 362–369.
Morgan Kaufmann Publishers Inc., 2001.
Neal, Radford M. Probabilistic inference using Markov Chain
Monte Carlo methods. 1993.
Neal, Radford M. Slice sampling. Annals of statistics, pp. 705–
741, 2003.
Papaspiliopoulos, Omiros, Roberts, Gareth O, and Sköld, Martin. Non-centered parameterisations for hierarchical models
and data augmentation. In Bayesian Statistics 7: Proceedings
of the Seventh Valencia International Meeting, pp. 307. Oxford
University Press, USA, 2003.
Papaspiliopoulos, Omiros, Roberts, Gareth O, and Sköld, Martin.
A general framework for the parametrization of hierarchical
models. Statistical Science, pp. 59–73, 2007.

Duchi, John, Hazan, Elad, and Singer, Yoram. Adaptive subgradient methods for online learning and stochastic optimization.
Journal of Machine Learning Research, 12:2121–2159, 2010.

Pearl, Judea. Reverend Bayes on inference engines: A distributed
hierarchical approach. Cognitive Systems Laboratory, School
of Engineering and Applied Science, University of California,
Los Angeles, 1982.

Frey, Brendan J and Hinton, Geoffrey E. Variational learning in
nonlinear Gaussian belief networks. Neural Computation, 11
(1):193–213, 1999.

Pearl, Judea. Causality: models, reasoning and inference, volume 29. Cambridge Univ Press, 2000.

Gelfand, AE, Sahu, SK, and Carlin, BP. Efficient parameterisations for normal linear mixed models. Biometrika, 82:479–488,
1995.

Raiko, Tapani, Valpola, Harri, and LeCun, Yann. Deep learning
made easier by linear transformations in perceptrons. In International Conference on Artificial Intelligence and Statistics,
pp. 924–932, 2012.

Goodfellow, Ian J, Warde-Farley, David, Mirza, Mehdi, Courville,
Aaron, and Bengio, Yoshua. Maxout networks. arXiv preprint
arXiv:1302.4389, 2013.

Rezende, Danilo Jimenez, Mohamed, Shakir, and Wierstra, Daan.
Stochastic back-propagation and variational inference in deep
latent gaussian models. arXiv preprint arXiv:1401.4082, 2014.

Hinton, Geoffrey E, Srivastava, Nitish, Krizhevsky, Alex,
Sutskever, Ilya, and Salakhutdinov, Ruslan R. Improving neural networks by preventing co-adaptation of feature detectors.
arXiv preprint arXiv:1207.0580, 2012.

Rumelhart, David E, Hinton, Geoffrey E, and Williams, Ronald J.
Learning representations by back-propagating errors. Nature,
323(6088):533–536, 1986.

Hoffman, Matthew D and Gelman, Andrew. The no-U-turn sampler: Adaptively setting path lengths in Hamiltonian Monte
Carlo. arXiv preprint arXiv:1111.4246, 2011.
Kass, Robert E, Carlin, Bradley P, Gelman, Andrew, and Neal,
Radford M. Markov chain Monte Carlo in practice: A
roundtable discussion. The American Statistician, 52(2):93–
100, 1998.
Kingma, Diederik P and Welling, Max. Auto-Encoding Variational Bayes. arXiv preprint arXiv:1312.6114, 2013.
Krizhevsky, Alex, Sutskever, Ilya, and Hinton, Geoff. Imagenet
classification with deep convolutional neural networks. In
Advances in Neural Information Processing Systems 25, pp.
1106–1114, 2012.
Maaten, Laurens, Chen, Minmin, Tyree, Stephen, and Weinberger, Kilian Q. Learning with marginalized corrupted features. In Proceedings of the 30th International Conference on
Machine Learning (ICML-13), pp. 410–418, 2013.
Meng, X-L and Van Dyk, David. Fast EM-type implementations
for mixed effects models. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 60(3):559–578, 1998.

Tang, Yichuan and Salakhutdinov, Ruslan. Learning stochastic
feedforward neural networks. In Advances in Neural Information Processing Systems, pp. 530–538, 2013.
Van Dyk, David A and Meng, Xiao-Li. The art of data augmentation. Journal of Computational and Graphical Statistics, 10
(1), 2001.
Wei, Greg CG and Tanner, Martin A. A Monte Carlo implementation of the EM algorithm and the poor man’s data augmentation
algorithms. Journal of the American Statistical Association, 85
(411):699–704, 1990.
Yu, Yaming and Meng, Xiao-Li. To Center or Not to Center: That Is Not the Question–An Ancillarity-Sufficiency
Interweaving Strategy (ASIS) for Boosting MCMC Efficiency. Journal of Computational and Graphical Statistics, 20(3):531–570, 2011.
doi: 10.1198/jcgs.2011.
203main. URL http://amstat.tandfonline.com/
doi/abs/10.1198/jcgs.2011.203main.

