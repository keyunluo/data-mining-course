Accelerated Proximal Stochastic Dual Coordinate Ascent for Regularized Loss
Minimization
Shai Shalev-Shwartz
School of Computer Science and Engineering, The Hebrew University, Jerusalem, Israel
Tong Zhang
Department of Statistics, Rutgers University, NJ, USA, and Baidu Inc., Beijing, China

Abstract
We introduce a proximal version of the stochastic dual coordinate ascent method and show how
to accelerate the method using an inner-outer iteration procedure. We analyze the runtime of the
framework and obtain rates that improve stateof-the-art results for various key machine learning optimization problems including SVM, logistic regression, ridge regression, Lasso, and multiclass SVM. Experiments validate our theoretical
findings.

1. Introduction
We consider the following generic optimization problem
associated with regularized loss minimization of linear predictors: Let X1 , . . . , Xn be matrices in Rd×k (referred to
as instances), let φ1 , . . . , φn be a sequence of vector convex functions defined on Rk (referred to as loss functions),
let g(·) be a convex function defined on Rd (referred to as
a regularizer), and let λ ≥ 0 (referred to as a regularization
parameter). Our goal is to solve:
" n
#
1X
>
min P (w) where P (w) =
φi (Xi w) + λg(w) .
n i=1
w∈Rd
(1)
For example, in ridge regression the regularizer is g(w) =
1
2
2 kwk2 , the instances are column vectors, and for every i
the i’th loss function is φi (a) = 12 (a−yi )2 , for some scalar
yi .
Let w∗ = argminw P (w) (we will later make assumptions
that imply that w∗ is unique). We say that w is -accurate if
P (w) − P (w∗ ) ≤ . Our main result is a new algorithm for
solving (1). If g is 1-strongly convex and each φi is (1/γ)Proceedings of the 31 st International Conference on Machine
Learning, Beijing, China, 2014. JMLR: W&CP volume 32. Copyright 2014 by the author(s).

SHAIS @ CS . HUJI . AC . IL

TONGZ @ RCI . RUTGERS . EDU

smooth (meaning that its gradient is (1/γ)-Lipschitz), then
our algorithm finds, with probability of at least 1 − δ, an
-accurate solution to (1) in time
 


r
1
n
Õ d n + min
,
.
λγ
λγ
This applies, for example, to ridge regression and to logistic
regression with L2 regularization. The Õ notation hides
constants and logarithmic terms.
1
Intuitively, we can think of λγ
as the condition number of
the problem. If the condition number is O(n) then our
runtime becomes Õ(dn). This means that the runtime is
nearly linear in the data size. This matches the recent result
of Shalev-Shwartz & Zhang [21], Le Roux et al. [13], but
our setting is significantly more general. When the condition q
number is much larger than n, our runtime becomes
Õ(d λnγ ). This significantly improves over the result of

[21, 13]. It also significantly improves over the runtime of
accelerated
q gradient descent due to Nesterov [16], which is
Õ(d n λ1γ ).
By applying a smoothing technique to φi , we also derive
a method that finds an -accurate solution to (1) assuming
that each φi is O(1)-Lipschitz, and obtain the runtime
r 
 

1
n
.
Õ d n + min
,
λ
λ
This applies, for example, to SVM with the hinge-loss. It
d
significantly improves over the rate λ
of SGD (e.g. [23]),
1
when λ  n.
We can also apply our results to non-strongly convex regularizers (such as the L1 norm regularizer), or to nonregularized problems, by adding a slight L2 regularization.
For example, for L1 regularized problems, and assuming
that each φi is (1/γ)-smooth, we obtain the runtime of
 

r 
n
1
Õ d n + min
,
.
γ
γ

Accelerated Proximal Stochastic Dual Coordinate Ascent

This applies, for example, to the Lasso problem, in which
the goal is to minimize the squared loss plus an L1 regularization term.
To put our results in context, in Table 1 we specify the
runtime of various algorithms (while ignoring constants
and logarithmic terms) for three key machine learning applications; SVM in which φi (a) = max{0, 1 − a} and
g(w) = 21 kwk22 , Lasso in which φi (a) = 12 (a − yi )2
and g(w) = σkwk1 , and Ridge Regression in which
φi (a) = 21 (a − yi )2 and g(w) = 12 kwk22 . Additional applications, and a more detailed runtime comparison to previous work, are given in Section 4. In the table, SGD stands
for Stochastic Gradient Descent, and AGD stands for Accelerated Gradient Descent.
Technical contribution: Our algorithm combines two
ideas. The first is a proximal version of stochastic dual coordinate ascent (SDCA).1 In particular, we generalize the
recent analysis of [21] in two directions. First, we allow the
regularizer, g, to be a general strongly convex function (and
not necessarily the squared Euclidean norm). This allows
us to consider non-smooth regularization function, such as
the L1 regularization. Second, we allow the loss functions, φi , to be vector valued functions which are smooth
(or Lipschitz) with respect to a general norm. This generalization is useful in multiclass applications.
As
in [21],
 
1
the runtime of this procedure is Õ d n + λγ . This
would be a nearly linear time (in the size of the data) if
1
1
λγ = O(n). Our second idea deals with the case λγ  n
by iteratively approximating the objective function P with
objective functions that have a stronger regularization. In
particular, each iteration of our acceleration procedure involves approximate minimization of P (w) + κ2 kw − yk22 ,
with respect to w, where y is a vector obtained from previous iterates and κ is order of 1/(γn). The idea is that
the addition of the relatively strong regularization makes
the runtime of our proximal stochastic dual coordinate ascent procedure be Õ(dn). And, with a proper choice of y
at each iteration, we show that the sequence of solutions
of the problems with the q
added regularization converge to
1
the minimum of P after λγn
iterations. This yields the
q
n
overall runtime of d λγ
.
Additional related work: As mentioned before, our first
contribution is a proximal version of the stochastic dual co1

Technically speaking, it may be more accurate to use the term
randomized dual coordinate ascent, instead of stochastic dual coordinate ascent. This is because our algorithm makes more than
one pass over the data, and therefore cannot work directly on distributions with infinite support. However, following the convention in the prior machine learning literature, we do not make this
distinction.

ordinate ascent method and extension of the analysis given
in Shalev-Shwartz & Zhang [21]. Stochastic dual coordinate ascent has also been studied in Collins et al. [3] but
in more restricted settings than the general problem considered in this paper. One can also apply the analysis of
stochastic coordinate descent methods given in Richtárik &
Takáč [17] on the dual problem. However, here we are interested in understanding the primal sub-optimality, hence
an analysis which only applies to the dual problem is not
sufficient.
The generality of our approach allows us to apply it for
multiclass prediction problems. We discuss this in detail
later on in Section 4. Recently, [11] derived a stochastic
coordinate ascent for structural SVM based on the FrankWolfe algorithm. Although with different motivations, for
the special case of multiclass problems with the hinge-loss,
their algorithm ends up to be the same as our proximal dual
ascent algorithm (with the same rate). Our approach allows
to accelerate the method and obtain an even faster rate.
The proof of our acceleration method adapts Nesterov’s
estimation sequence technique, studied in Devolder et al.
[6], Schmidt et al. [18], to allow approximate and stochastic proximal mapping. See also [1, 5]. In particular, it relies
on similar ideas as in Proposition 4 of [18]. However, our
specific requirement is different, and the proof presented
here is different and significantly simpler than that of [18].
There have been several attempts to accelerate stochastic
optimization algorithms. See for example [10, 9, 4] and the
references therein. However, the runtime of these methods
have a polynomial dependence on 1/ even if φi are smooth
and g is λ-strongly convex, as opposed to the logarithmic
dependence on 1/ obtained here. As in [13, 21], we avoid
the polynomial dependence on 1/ by allowing more than
a single pass over the data.

2. Preliminaries
All the functions we consider in this paper are proper convex functions over a Euclidean space. We use R to denote
the set of real numbers and to simplify our notation, when
we use R to denote the range of a function f we in fact
allow f to output the value +∞.
Given a function f : Rd → R we denote its conjugate function by f ∗ (y) = supx [y > x − f (x)] . Given a
norm k · kP we denote the dual norm by k · kD where
kykD = supx:kxkP =1 y > x. We use k · k or k · k2 to denote
P
the L2 norm, kxk = x> x. We also use kxk1 = i |xi |
and kxk∞ = maxi |xi |. The operator norm of a matrix X with respect to norms k · kP , k · kP 0 is defined as
kXkP →P 0 = supu:kukP =1 kXukP 0 .
A function f : Rk → Rd is L-Lipschitz with respect to a

Accelerated Proximal Stochastic Dual Coordinate Ascent

Problem

Algorithm

Runtime
d

SGD [23]
SVM

λ
q
dn λ1

AGD [15]
This paper

Lasso

d n + min{ λ1 ,

SGD and variants (e.g. [25, 24, 19])

d
2

Stochastic Coordinate Descent [20, 14]

dn

q

dn

FISTA [16, 2]
This paper
Exact
Ridge Regression

SGD [13], SDCA [21]
AGD [16]
This paper

pn 
λ }

1


d n + min{ 1 ,

pn 
}

d2 n + d3

d n + λ1
q
dn λ1
p 
d n + min{ λ1 , nλ }

Table 1. The runtime of various algorithms for three key machine learning problems.

norm k · kP , whose dual norm is k · kD , if for all a, b ∈ Rd ,
we have kf (a) − f (b)kD ≤ L ka − bkP . A function f :
Rd → R is (1/γ)-smooth with respect to a norm k · kP if
it is differentiable and its gradient is (1/γ)-Lipschitz with
respect to k · kP . An equivalent condition is that for all
1
a, b ∈ Rd , we have f (a) ≤ f (b)+∇f (b)> (a−b)+ 2γ
ka−
2
d
bkP . A function f : R → R is γ-strongly convex with
respect to k·kP if f (w +v) ≥ f (w)+∇f (w)> v + γ2 kvk2P .
It is well known that f is γ-strongly convex with respect to
k · kP if and only if f ∗ is (1/γ)-smooth with respect to the
dual norm, k · kD .
The dual problem of (1) is to maximize D(α) over α ∈
Rk×n where
" n
!#
n
X
1X
1
D(α) =
−φ∗i (−αi ) − λg ∗ λn
Xi αi
,
n i=1
i=1
(2)
where αi is the i’th column of the matrix α, which forms a
vector in Rk .
We will assume that g is strongly convex which implies that
g ∗ (·) is continuous differentiable. If we define
n

v(α) =

1 X
Xi αi
λn i=1

and

w(α) = ∇g ∗ (v(α)),

(3)
then it is known that w(α∗ ) = w∗ , where α∗ is an optimal solution of (2). It is also known that P (w∗ ) = D(α∗ )
which immediately implies that for all w and α, we have
P (w) ≥ D(α), and hence the duality gap defined as
P (w(α)) − D(α) can be regarded as an upper bound on

both the primal sub-optimality, P (w(α)) − P (w∗ ), and
on the dual sub-optimality, D(α∗ ) − D(α).

3. Main Results
In this section we describe our algorithms and their analysis. We start in Section 3.1 with a description of our proximal stochastic dual coordinate ascent procedure (ProxSDCA). Then, in Section 3.2 we show how to accelerate
the method by calling Prox-SDCA on a sequence of problems with a strong regularization. Throughout this section
we assume that the loss functions are smooth. The case of
non-smooth but Lipschitz loss functions can be tackled by
applying a “smoothing” technique (see Nesterov [15]).
Due to the lack of space, all proofs are omitted from this extended abstract and can be found in the long version of the
paper [22]. The long version also contains detailed pseudocode of all the algorithms.
3.1. Proximal Stochastic Dual Coordinate Ascent
We now describe our proximal stochastic dual coordinate
ascent procedure for solving (1). Our results in this subsection holds for g being a 1-strongly convex function with
respect to some norm k · kP 0 and every φi being a (1/γ)smooth function with respect to some other norm k · kP .
The corresponding dual norms are denoted by k · kD0 and
k · kD respectively.
The dual objective in (2) has a different dual vector associated with each example in the training set. At each iteration
of dual coordinate ascent we only allow to change the i’th

Accelerated Proximal Stochastic Dual Coordinate Ascent

column of α, while the rest of the dual vectors are kept intact. We focus on a randomized version of dual coordinate
ascent, in which at each round we choose which dual vector
to update uniformly at random.
P
(t−1)
At step t, let v (t−1) = (λn)−1 i Xi αi
and let
w(t−1) = ∇g ∗ (v (t−1) ). We will update the i-th dual vari(t)
(t−1)
able αi = αi
+ ∆αi , in a way that will lead to a
sufficient increase of the dual objective. For the primal
problem, this would lead to the update v (t) = v (t−1) +
(λn)−1 Xi ∆αi , and therefore w(t) = ∇g ∗ (v (t) ) can also
be written as
#
"
!
n
X
(t)
>
−1
(t)
n
Xi αi
+ λg(w) .
w
= argmin −w
w

i=1

Note that this particular update is rather similar to the update step of proximal-gradient dual-averaging method (see
for example Xiao [24]). The difference is on how α(t) is
updated.
The goal of dual ascent methods is to increase the dual
objective as much as possible, and thus the optimal way
to choose ∆αi would be to maximize the dual objective,
namely, we shall let ∆αi be the maximizer of
1
− φ∗i (−(αi + ∆αi )) − λg ∗ (v (t−1) + (λn)−1 Xi ∆αi ).
n

3.2. Acceleration
The Prox-SDCA procedure described 
in the previous
sub
R2
section has the iteration bound of Õ n + λγ . This is
a nearly linear runtime whenever the condition number,
R2 /(λγ), is O(n). In this section we show how to improve
the dependence on the condition number by an acceleration procedure. In particular, throughout this section we
2
assume that 10 n < R
λγ . We further assume throughout this
subsection that the regularizer, g, is 1-strongly convex with
respect to the Euclidean norm, i.e. kukP 0 = k · k2 . This
also implies that kukD0 is the Euclidean norm. A generalization of the acceleration technique for strongly convex
regularizers with respect to general norms is left to future
work.
The main idea of the acceleration procedure is to iteratively run the Prox-SDCA procedure, where at iteration t
we call Prox-SDCA with the modified objective, P̃t (w) =
P (w) + κ2 kw − y (t−1) k2 , where κ is a relatively large
regularization parameter and the regularization is centered
around the vector
y (t−1) = w(t−1) + β(w(t−1) − w(t−2) )
for some β ∈ (0, 1). That is, our regularization is centered
around the previous solution plus a “momentum term”
β(w(t−1) − w(t−2) ).

However, for a complex g ∗ (·), this optimization problem
may not be easy to solve. To simplify the optimization
problem we can rely on the smoothness of g ∗ (with respect
to a norm k · kD0 ) and instead of directly maximizing the
dual objective function, we try to maximize a proximal objective which is a lower bound of the dual objective. This
yields maximization of the expression:

The values of β and κ are set by our theoretical analysis as follows: κ = R2 /(γn) − λ, and β = 1−η
1+η where
p
−1
η
= −1 + κ/λ. At each “outer” iteration of the acceleration procedure, we apply Prox-SDCA for approximately solving P̃t (w). We initialize the dual solution to
be the dual solution from the previous iteration, and we
require the accuracy of Prox-SDCA at iteration t to be
η
−2
)(P (0) − D(0)) and
2(1+η −1 ) ξt−1 where ξ1 = (1 + η
1
∗
(t−1) >
2
− φi (−(αi + ∆αi )) − w
Xi ∆αi −
kXi ∆αi kD0 . ξ = (1 − η/2)t−1 ξ .
t
t−1
2λn

In general, this optimization problem is still not necessarily simple to solve because φ∗ may also be complex. We
will thus also propose alternative update rules for ∆αi of
(t−1)
the form ∆αi = s(−∇φi (Xi> w(t−1) ) − αi
) for an
appropriately chosen step size parameter s > 0. Our analysis shows that setting s = R2λnγ
+λnγ , for R being an upper
bound on kXi kD→D0 , still leads to a sufficient increase in
the dual objective. A detailed pseudo-code can be found in
[22].
The theorem below provides an upper bound on the number
of iterations required by our prox-SDCA procedure.
Theorem 1. The expected runtime required to minimize P
up to accuracy  using procedure Prox-SDCA is



 
D(α∗ ) − D(α(0) )
R2
· log
.
O d n+
λγ


A detailed pseudo-code of the algorithm is given in [22].
All the parameters of the algorithm are determined by our
theory.
Theorem 2. The total runtime required by accelerated
Prox-SDCA to guarantee an -accurate solution with probability of at least 1 − δ is
 
 s 2
nR
1
· log
·
O d
λγ
δ
 2   2 


R
R
P (0) − D(0)
log
log
+ log
.
λγ n
λγn


4. Applications
In this section we specify our algorithmic framework to
several popular machine learning applications. In Section 4.1 we start by describing several loss functions and

Accelerated Proximal Stochastic Dual Coordinate Ascent

deriving their conjugate. In Section 4.2 we describe several
regularization functions. Finally, in the rest of the subsections we specify our algorithm for Ridge regression, SVM,
and Lasso.
4.1. Loss functions
Squared loss: φ(a) =
conjugate function is

1
2 (a

− y)2 for some y ∈ R. The

1
1
φ∗ (b) = max ab − (a − y)2 = b2 + yb
a
2
2
Hinge loss: φ(a) = [1 − a]+ := max{0, 1 − a}. The
conjugate function is
(
b
if b ∈ [−1, 0]
∗
φ (b) = max ab − max{0, 1 − a} =
a
∞ otherwise

L1 regularization: Another popular regularization we
consider is the L1 regularization,
f (w) = σ kwk1 .
This is not a strongly convex regularizer and therefore we
will add a slight L2 regularization to it and define the L1 L2 regularization as
g(w) =

1
kwk22 + σ 0 kwk1 ,
2

(5)

where σ 0 = σλ for some small λ. Note that λg(w) =
λ
2
2 kwk2 + σkwk1 , so if λ is small enough (as will be formalized later) we obtain that λg(w) ≈ σkwk1 .
The conjugate of g is


1
>
2
0
g (v) = max w v − kwk2 − σ kwk1 .
w
2
∗

Smooth hinge loss: This loss is obtained by smoothing
the hinge-loss. This loss is parameterized by a scalar γ > 0
and is defined as:


a≥1
0
φ̃γ (a) = 1 − a − γ/2 a ≤ 1 − γ
(4)

1
2
(1
−
a)
o.w.
2γ

The maximizer is also ∇g ∗ (v) and we now show how to
calculate it. We have


1
2
0
∗
>
∇g (v) = argmax w v − kwk2 − σ kwk1
2
w


1
2
0
= argmin kw − vk2 + σ kwk1
2
w

The conjugate function is
(
b + γ2 b2
∗
φ̃γ (b) =
∞

A sub-gradient of the objective of the optimization problem
above is of the form w − v + σ 0 z = 0, where z is a vector
with zi = sign(wi ), where if wi = 0 then zi ∈ [−1, 1].
Therefore, if w is an optimal solution then for all i, either
wi = 0 or wi = vi − σ 0 sign(wi ). Furthermore, it is easy to
verify that if w is an optimal solution then for all i, if wi 6=
0 then the sign of wi must be the sign of vi . Therefore,
whenever wi 6= 0 we have that wi = vi − σ 0 sign(vi ). It
follows that in that case we must have |vi | > σ 0 . And, the
other direction is also true, namely, if |vi | > σ 0 then setting
wi = vi − σ 0 sign(vi ) leads to an objective value whose i’th
component is

if b ∈ [−1, 0]
otherwise

It follows that φ̃∗γ is γ strongly convex and φ̃ is (1/γ)smooth. In addition, if φ is the vanilla hinge-loss, we have
for every a that φ(a) − γ/2 ≤ φ̃(a) ≤ φ(a) .
4.2. Regularizers
L2 regularization: The simplest regularization is the
squared L2 regularization
1
kwk22 .
2
This is a 1-strongly convex regularization function whose
conjugate is g ∗ (θ) = 12 kθk22 . We also have ∇g ∗ (θ) = θ .
g(w) =

For our acceleration procedure, we also use the L2 regularization plus a linear term, namely,
1
kwk2 − w> z ,
2
for some vector z. The conjugate of this function is


1
1
∗
>
2
g (θ) = max w (θ + z) − kwk = kθ + zk2 .
w
2
2
g(w) =

1 0 2
1
(σ ) + σ 0 (|vi | − σ 0 ) ≤ |vi |2 ,
2
2
where the right-hand side is the i’th component of the objective value we will obtain by setting wi = 0. This leads
to the conclusion that ∇i g ∗ (v) = sign(vi ) [|vi | − σ 0 ]+ . It
2
P
follows that g ∗ (v) = 21 i [|vi | − σ 0 ]+ .
4.3. Ridge Regression
In ridge regression, we minimize the squared loss with L2
regularization. That is, g(w) = 12 kwk2 and for every i we
have that xi ∈ Rd and φi (a) = 12 (a−yi )2 for some yi ∈ R.
The primal problem is therefore
n

We also have
∇g ∗ (θ) = θ + z .

P (w) =

1 X >
λ
(x w − yi )2 + kwk2 .
2n i=1 i
2

Accelerated Proximal Stochastic Dual Coordinate Ascent

8]). However, all of these variants share the runtime of
O(dR2 B 2 /2 ), which is much slower than our runtime
when  is small.

The runtime of Prox-SDCA for ridge regression is
 

R2
Õ d n +
,
λ
where R = maxi kxi k. This matches the recent results
of [13, 21]. If R2 /λ  n we can apply the accelerated
procedure and obtain the improved runtime
!
r
nR2
.
Õ d
λ
4.4. Lasso
In the Lasso problem, the loss function is the squared loss
but the regularization function is L1 . That is, we need to
solve the problem:
"
#
n
1 X >
2
(x w − yi ) + σkwk1 ,
min
(6)
w
2n i=1 i
with a positive regularization parameter σ ∈ R+ .
Consider the optimization problem of minimizing
n

P (w) =

1 X >
(x w − yi )2 + λ
2n i=1 i



1
σ
kwk22 + kwk1
2
λ



Another relevant approach is the FISTA algorithm of [2].
The shrinkage operator of FISTA is the same as the gradient
of g ∗ used in our approach. It is a batch algorithm using
Nesterov’s accelerated gradient technique.For the squared

q
R2 B 2
.
loss function, the runtime of FISTA is O d n

This
√ bound is worst than our bound by a factor of at least
n.
Another approach to solving (6) is stochastic coordinate descent over the primal problem.
[19]
 showed that the run
dnB 2
time of this approach is O
, under the assumption

that kxi k∞ ≤ 1 for all i. Similar results can also be found
in [14].
For our method, the runtime depends on R2 = maxi kxi k22 .
If R2 = O(1) then the runtime of our method is much better than that of [19]. In the general case, if maxi kxi k∞ ≤
1 then R2 ≤ d, which yields the runtime of
(
)!!
r
dB 2
n dB 2
Õ d n + min
,
.



,

(7)
for some λ > 0. This problem fits into our framework,
since now the regularizer is strongly convex. Furthermore,
if w∗ is an (/2)-accurate solution to the problem in (7),
then it is easy to verify that setting λ = (σ/ȳ)2 guarantees
that w∗ is an  accurate solution to the original problem
given in (6).
Let us now discuss the runtime of the resulting method.
Denote RP= maxi kxi k and for simplicity, assume that
n
1
2
2
ȳ = 2n
i=1 yi = O(1). Choosing λ = (σ/ȳ) , the
runtime of our method becomes
(
)!!
r
R2
nR2
.
Õ d n + min
,
 σ2
 σ2
It is also convenient to write the bound in terms of B =
kw̄k2 , where, as before, w̄ is the optimal solution of the L1
regularized problem. With this parameterization, we can
set λ = /B 2 and the runtime becomes
(
)!!
r
R2 B 2
n R2 B 2
Õ d n + min
,
.


The runtime of standard SGD is O(dR2 B 2 /2 ) even in
the case of smooth loss functions such as the squared loss.
Several variants of SGD, that leads to sparser intermediate solutions, have been proposed (e.g. [12, 19, 24, 7,

This is the same or better than [19] whenever d = O(n).
4.5. Linear SVM
Support Vector Machines (SVM) is an algorithm for learning a linear classifier. Linear SVM (i.e., SVM with linear
kernels) amounts to minimizing the objective
n

P (w) =

1X
λ
2
[1 − x>
i w]+ + kwk ,
n i=1
2

where [a]+ = max{0, a}, and for every i, xi ∈ Rd .
This can be cast as the objective given in (1) by letting
the regularization be g(w) = 21 kwk22 , and for every i,
φi (a) = [1 − a]+ , is the hinge-loss.

1
Let R = maxi kxi k2 . SGD enjoys the rate of O λ
.
Many software
packages
apply
SDCA
and
obtain
the
rate

1
Õ n + λ
. We now show how our accelerated proximal
pn
SDCA enjoys the rate Õ n + λ
. This is significantly
better than the rate of SGD when λ < 1/n. We note that
a default setting for λ, which often works well in practice,
is λ = 1/n. In this case, λ = /n  1/n.
Our first step is to smooth the hinge-loss. Let γ =  and
consider the smooth hinge-loss as defined in (4). Recall
that the smooth hinge-loss satisfies, for every a, φ(a) −
γ/2 ≤ φ̃(a) ≤ φ(a). Let P̃ be the SVM objective while
replacing the hinge-loss with the smooth hinge-loss. Therefore, for every w0 and w, P (w0 )−P (w) ≤ P̃ (w0 )− P̃ (w)+

Accelerated Proximal Stochastic Dual Coordinate Ascent

γ/2 . It follows that if w0 is an (/2)-optimal solution for
P̃ , then it is -optimal solution for P .
Denote R = maxi kxi k. Then, the runtime of the resulting
method is
s
)!!
(
nR2
R2
,
.
Õ d n + min
γλ
γλ
In particular, choosing γ =  we obtain a solution to the
original SVM problem in runtime of
)!!
(
r
nR2
R2
.
,
Õ d n + min
λ
λ
As mentioned before, this is better than SGD when
n.

1
λ



is relatively large, but it converges much slower when λ is
small. This is consistent with our theory. Finally, the relative performance of FISTA and Prox-SDCA depends on the
ratio between λ and n, but in all cases, Accelerated-ProxSDCA is much faster than FISTA. This is again consistent
with our theory.

6. Discussion and Open Problems
We have described and analyzed a proximal stochastic dual
coordinate ascent method and have shown how to accelerate the procedure. The overall runtime of the resulting
method improves state-of-the-art results in many cases of
interest.
There are two main open problems that we leave to future
research.

5. Experiments
In this section we compare Prox-SDCA, its accelerated version Accelerated-Prox-SDCA, and the FISTA algorithm of
[2], on L1 − L2 regularized loss minimization problems.
The experiments were performed on three large datasets
with very different feature counts and sparsity, which were
kindly provided by Thorsten Joachims (the datasets were
also used in [21]). These are binary classification problems, with each xi being a vector which has been normalized to be kxi k2 = 1, and yi being a binary class label of
±1. We multiplied each xi by yi and following [21], we
employed the smooth hinge loss, φ̃γ , as in (4), with γ = 1.
The optimization problem we need to solve is therefore to
minimize
n

P (w) =

1X
λ
2
φ̃γ (x>
i w) + kwk2 + σkwk1 .
n i=1
2

In the experiments, we set σ = 10−5 and vary λ in the
range {10−6 , 10−7 , 10−8 , 10−9 }.
The convergence behaviors are plotted in Figure 1. In all
the plots we depict the primal objective as a function of
the number of passes over the data (often referred to as
“epochs”). For FISTA, each iteration involves a single pass
over the data. For Prox-SDCA, each n iterations are equivalent to a single pass over the data. And, for AcceleratedProx-SDCA, each n inner iterations are equivalent to a single pass over the data. For Prox-SDCA and AcceleratedProx-SDCA we implemented their corresponding stopping
conditions and terminate the methods once an accuracy of
10−3 was guaranteed.
It is clear from the graphs that Accelerated-Prox-SDCA
yields the best results, and often significantly outperform
the other methods. Prox-SDCA behaves similarly when λ

1
λγ

is larger than n, the runtime
 q 
n
. Is it possible to
of our procedure becomes Õ d λγ
 
q 
1
derive a method whose runtime is Õ d n + λγ
?

Open Problem 1. When

Open Problem 2. Our Prox-SDCA procedure and its analysis works for regularizers which are strongly convex with
respect to an arbitrary norm. However, our acceleration
procedure is designed for regularizers which are strongly
convex with respect to the Euclidean norm. Is is possible to
extend the acceleration procedure to more general regularizers?

Acknowledgements
The authors would like to thank Fen Xia for careful proofreading of the paper which helped us correct numerous typos. Shai Shalev-Shwartz is supported by the following
grants: Intel Collaborative Research Institute for Computational Intelligence (ICRI-CI) and ISF 598-10. Tong Zhang
is supported by the following grants: NSF IIS-1016061,
NSF DMS-1007527, and NSF IIS-1250985.

Accelerated Proximal Stochastic Dual Coordinate Ascent

λ

astro-ph

cov1
AccProxSDCA
ProxSDCA
FISTA

0.5
0.4
0.3

10

−6

0.2

CCAT

0.5

AccProxSDCA
ProxSDCA
FISTA

0.45

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4

0.4

0.3

0.35

0.2

0.1
0.3
0

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4
0.3

10

−7

0.2

0.1
0

20

40

60

0.5

80

AccProxSDCA
ProxSDCA
FISTA

0.45

0

100

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4

0.4

0.3

0.35

0.2

0.1
0.3
0

0

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4
0.3

10

−8

0.2

0.1
0

20

40

60

0.5

80

100

AccProxSDCA
ProxSDCA
FISTA

0.45

0

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4

0.4

0.3

0.35

0.2

0.1
0.3
0

0

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4
0.3

10−9

0.2

0.1
0

20

40

60

0.5

80

100

AccProxSDCA
ProxSDCA
FISTA

0.45

0

20

40

60

80

100

AccProxSDCA
ProxSDCA
FISTA

0.5
0.4

0.4

0.3

0.35

0.2

0.3

0.1

0.1
0

0

20

40

60

80

100

0

20

40

60

80

100

0

20

40

60

80

100

Figure 1. Comparing Accelerated-Prox-SDCA, Prox-SDCA, and FISTA for minimizing the smoothed hinge-loss (γ = 1) with L1 − L2
regularization (σ = 10−5 and λ varies in {10−6 , . . . , 10−9 }). In each of these plots, the y-axis is the primal objective and the x-axis is
the number of passes through the entire training set. The three columns corresponds to the three data sets described in [21]. The methods
are terminated either if stopping condition is met (with  = 10−3 ) or after 100 passes over the data.

Accelerated Proximal Stochastic Dual Coordinate Ascent

References
[1] Baes, Michel. Estimate sequence methods: extensions and approximations. Institute for Operations
Research, ETH, Zürich, Switzerland, 2009.
[2] Beck, A. and Teboulle, M. A fast iterative shrinkagethresholding algorithm for linear inverse problems.
SIAM Journal on Imaging Sciences, 2(1):183–202,
2009.
[3] Collins, M., A. Globerson, Koo, T., Carreras, X., and
Bartlett, P. Exponentiated gradient algorithms for
conditional random fields and max-margin markov
networks. Journal of Machine Learning Research, 9:
1775–1822, 2008.
[4] Cotter, Andrew, Shamir, Ohad, Srebro, Nathan, and
Sridharan, Karthik. Better mini-batch algorithms
via accelerated gradient methods. arXiv preprint
arXiv:1106.4574, 2011.
[5] d’Aspremont, Alexandre. Smooth optimization with
approximate gradient. SIAM Journal on Optimization, 19(3):1171–1183, 2008.
[6] Devolder, Olivier, Glineur, Francois, and Nesterov,
Yuri. First-order methods of smooth convex optimization with inexact oracle. Technical Report 2011/2,
CORE, 2011.
[7] Duchi, J. and Singer, Y. Efficient online and batch
learning using forward backward splitting. The Journal of Machine Learning Research, 10:2899–2934,
2009.
[8] Duchi, John, Shalev-Shwartz, Shai, Singer, Yoram,
and Tewari, Ambuj. Composite objective mirror descent. In Proceedings of the 23rd Annual Conference
on Learning Theory, pp. 14–26, 2010.
[9] Ghadimi, Saeed and Lan, Guanghui.
Optimal
stochastic approximation algorithms for strongly convex stochastic composite optimization i: A generic algorithmic framework. SIAM Journal on Optimization,
22(4):1469–1492, 2012.
[10] Hu, Chonghai, Pan, Weike, and Kwok, James T. Accelerated gradient methods for stochastic optimization and online learning. In Advances in Neural Information Processing Systems, pp. 781–789, 2009.
[11] Lacoste-Julien, S., Jaggi, M., Schmidt, M., and
Pletscher, P. Stochastic block-coordinate frank-wolfe
optimization for structural svms. arXiv preprint
arXiv:1207.4747, 2012.

[12] Langford, J., Li, L., and Zhang, T. Sparse online
learning via truncated gradient. In NIPS, pp. 905–
912, 2009.
[13] Le Roux, Nicolas, Schmidt, Mark, and Bach, Francis. A Stochastic Gradient Method with an Exponential Convergence Rate for Strongly-Convex Optimization with Finite Training Sets. arXiv preprint
arXiv:1202.6258, 2012.
[14] Nesterov, Y. Efficiency of coordinate descent methods on huge-scale optimization problems. SIAM Journal on Optimization, 22(2):341–362, 2012.
[15] Nesterov, Yurii. Smooth minimization of non-smooth
functions. Mathematical Programming, 103(1):127–
152, 2005.
[16] Nesterov, Yurii. Gradient methods for minimizing
composite objective function, 2007.
[17] Richtárik, Peter and Takáč, Martin.
Iteration
complexity of randomized block-coordinate descent
methods for minimizing a composite function. Mathematical Programming, pp. 1–38, 2012.
[18] Schmidt, Mark, Roux, Nicolas Le, and Bach, Francis. Convergence rates of inexact proximal-gradient
methods for convex optimization. Technical Report
arXiv:1109.2415, arXiv, 2011.
[19] Shalev-Shwartz, S. and Tewari, A. Stochastic methods for l 1-regularized loss minimization. The Journal
of Machine Learning Research, 12:1865–1892, 2011.
[20] Shalev-Shwartz, Shai and Tewari, Ambuj. Stochastic methods for l1 regularized loss minimization. In
ICML, pp. 117, 2009.
[21] Shalev-Shwartz, Shai and Zhang, Tong. Stochastic dual coordinate ascent methods for regularized
loss minimization. Journal of Machine Learning Research, 14:567–599, Feb 2013.
[22] Shalev-Shwartz, Shai and Zhang, Tong. Accelerated
proximal stochastic dual coordinate ascent for regularized loss minimization. arxiv:1309.2375, 2013.
[23] Shalev-Shwartz, Shai, Singer, Yoram, and Srebro,
Nathan. Pegasos: Primal Estimated sub-GrAdient
SOlver for SVM. In ICML, pp. 807–814, 2007.
[24] Xiao, Lin. Dual averaging method for regularized
stochastic learning and online optimization. Journal
of Machine Learning Research, 11:2543–2596, 2010.
[25] Zhang, Tong. On the dual formulation of regularized
linear systems. Machine Learning, 46:91–129, 2002.

