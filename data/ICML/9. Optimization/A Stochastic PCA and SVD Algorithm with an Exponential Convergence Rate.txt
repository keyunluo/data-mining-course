A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

Ohad Shamir
Weizmann Institute of Science, Rehovot, Israel

Abstract
We describe and analyze a simple algorithm for
principal component analysis and singular value
decomposition, VR-PCA, which uses computationally cheap stochastic iterations, yet converges
exponentially fast to the optimal solution. In
contrast, existing algorithms suffer either from
slow convergence, or computationally intensive
iterations whose runtime scales with the data
size. The algorithm builds on a recent variancereduced stochastic gradient technique, which was
previously analyzed for strongly convex optimization, whereas here we apply it to an inherently non-convex problem, using a very different
analysis.

1. Introduction
We consider the following fundamental matrix optimization problem: Given a matrix X ∈ Rd×n , we wish to recover its top k left singular vectors (where k  d) by solving
1
kX > W k2F ,
(1)
max
d×k
>
W ∈R
:W W =I n
k · kF being the Frobenius norm and I being the identity matrix1 . A prominent application in machine learning and statistics is Principal Component Analysis (PCA),
which is one of the most common tools for unsupervised
data analysis and preprocessing: Given a data matrix X
whose columns consist of n instances in Rd , we are interested in finding a k-dimensional subspace (specified by a
d × k matrix W ), on which the projection of the data has
largest possible variance. Finding this subspace has numerous uses, from dimensionality reduction and data compression to data visualization, and the problem is extremely
well-studied.
1

The top k right singular values can also be extracted, by considering the matrix X > in lieu of X.
Proceedings of the 32 nd International Conference on Machine
Learning, Lille, France, 2015. JMLR: W&CP volume 37. Copyright 2015 by the author(s).

OHAD . SHAMIR @ WEIZMANN . AC . IL

Letting x1 , . . . , xn denote the columns of X, Eq. (1) can
be equivalently written as
!
n
1X
>
>
min
−W
xi xi W,
(2)
n i=1
W ∈Rd×k :W > W =I
which reveals that the solution is
the top k eigenvecPalso
n
tors of the covariance matrix n1 i=1 xi x>
i . In this paper,
we will mostly focus on the simplest possible form of this
problem, where k = 1, in which case the above reduces to
!
n
X
1
min −w>
xi x>
w,
(3)
i
n i=1
w:kwk2 =1
and our goal is to find the top eigenvector v1 . However, as
discussed later, the algorithm to be presented can be readily
extended to solve Eq. (2) for k > 1.
When the data size n and the dimension d are modest,
this problem can be solved exactly by a full singular value
decomposition of X.
 However, the required runtime is
O min{nd2 , n2 d} , which is prohibitive in large-scale applications. A common alternative is to use iterative methods such as power iterations or more sophisticated variants (Golub & van Loan, 2013). If the covariance matrix has bounded spectral norm and an eigengap λ between
its first and second eigenvalues, then these algorithms can
be shown to produce
 a unit vector which is -far from v1
(or −v1 ) after O log(1/)
iterations (where e.g. p = 1
λp
for power iterations). However, each iteration involves
multiplying
one or more vectors by the covariance matrix
P
1
>
i xi xi . Letting ds ∈ [0, d] denote the average sparn
sity (number of non-zero entries) in each xi , this requires
O(ds n) time by passing
through

 the entire data. Thus, the
total runtime is O ds n log(1/)
. When λ is small, this is
λp
equivalent to many passes over the data, which can be prohibitive for large datasets.
An alternative to these deterministic algorithms are
stochastic and incremental algorithms (e.g. (Krasulina,
1969; Oja, 1982; Oja & Karhunen, 1985) and more recently, (Arora et al., 2012; Mitliagkas et al., 2013; Arora
et al., 2013; De Sa et al., 2014)). In contrast to the algorithms above, these algorithms perform much cheaper iter-

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

ations by choosing some xi (uniformly at random or otherwise), and updating the current iterate using only xi . In
general, the runtime of each iteration is only O(ds ). On
the flip side, due to their stochastic and incremental nature,
the convergence rate (when known) is quite slow, with the
number of required iterations scaling linearly with 1/ and
additional problem parameters. This is useful for getting a
low to medium-accuracy solution, but is prohibitive when
a high-accuracy solution is required.
In this paper, we propose a new stochastic algorithm for
solving Eq. (3), denoted as VR-PCA 2 , which for bounded
data and under suitable assumptions, has provable runtime
of

 
 
1
1
.
O ds n + 2 log
λ

This algorithm combines the advantages of the previously
discussed approaches, while avoiding their main pitfalls:
On one hand, the runtime depends only logarithmically on
the accuracy , so it is suitable to get high-accuracy solutions; while on the other hand, the runtime scales as the
sum of the data size n and a factor involving the eigengap
parameter λ, rather than their product. This means that the
algorithm is still applicable
√ when λ is relatively small. In
fact, as long as λ ≥ Ω(1/ n), this runtime bound is better
than those mentioned earlier, and equals ds n up to logarithmic factors: Proportional to the time required to perform a
single scan of the data.
VR-PCA builds on a recently-introduced technique for
stochastic gradient variance reduction (see (Johnson &
Zhang, 2013) as well as (Mahdavi et al., 2013; Konecný &
Richtárik, 2013), and (Frostig et al., 2014) in a somewhat
different context). However, the setting in which we apply
this technique is quite different from previous works, which
crucially relied on the strong convexity of the optimization
problem, and often assume an unconstrained domain. In
contrast, our algorithm attempts to minimize the function in
Eq. (3), which is nowhere convex, let alone strongly convex
(in fact, it is concave everywhere). As a result, the analysis in previous papers is inapplicable, and we require a new
and different analysis to understand the performance of the
algorithm.

2. Algorithm and Analysis
The pseudo-code of our algorithm appears as Algorithm
1 below. We refer to a single execution of the inner loop
as an iteration, and each execution of the outer loop as an
epoch. Thus, the algorithm consists of several epochs, each
of which consists of running m iterations.
2

VR stands for “variance-reduced”.

Algorithm 1 VR-PCA
Parameters: Step size η, epoch length m
Input: Data matrix X = (x1 , . . . , xn ); Initial unit vector w̃0
for s = 1,P
2, . . . do

n
ũ = n1 i=1 xi x>
i w̃s−1
w0 = w̃s−1
for t = 1, 2, . . . , m do
Pick it ∈ {1, . . . , n} uniformly at random 

>
wt0 = wt−1 + η xit x>
it wt−1 − xit w̃s−1 + ũ
wt = kw10 k wt0
t
end for
w̃s = wm
end for

To understand the structure of the algorithm, it is helpful to
consider first the well-known Oja’s algorithm for stochastic PCA optimization (Oja, 1982), on which our algorithm
is based. In our setting, this rule is reduced to repeatedly
sampling xit uniformly at random, and performing the update
wt0 = wt−1 + ηt xit x>
it wt−1 , wt =
Letting A = n1 XX > =
lently rewritten as

1
n

Pn

i=1

1
wt .
kwt0 k

xi x>
i , this can be equiva-


wt0 = (I + ηt A)wt−1 + ηt xit x>
it − A wt−1
1
wt =
wt .
kwt0 k

(4)

Thus, at each iteration, the algorithm performs a power iteration (using a shifted and scaled version of the matrix
 A),
adds a stochastic zero-mean term ηt xit x>
it − A wt−1 ,
and projects back to the unit sphere. Recently, (Balsubramani et al., 2013) gave a rigorous finite-time analysis of
this algorithm, showing that if ηt = O(1/t), then under
suitable conditions, we get a convergence rate of O(1/T ).
The reason for the relatively slow convergence rate of this
algorithm is the constant variance of the stochastic term
added in each step. Inspired by recent variance-reduced
stochastic methods for convex optimization (Johnson &
Zhang, 2013), we change the algorithm in a way which encourages the variance of the stochastic term to decay over
time. Specifically, we can rewrite the update in each iteration of our VR-PCA algorithm as

wt0 = (I + ηA)wt−1 + η xit x>
it − A (wt−1 − w̃s−1 )
1
wt ,
(5)
wt =
kwt0 k
where w̃s−1 is the vector computed at the beginning of
each epoch. Comparing Eq. (5) to Eq. (4), we see that our

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

algorithm also performs a type of power iteration, followed
by adding a stochastic term zero-mean term. However, our
algorithm picks a fixed step size η, which is more aggressive that a decaying step size ηt . Moreover, the variance
of the stochastic term is no longer constant, but rather controlled by kwt−1 − w̃s−1 k. As we get closer to the optimal
solution, we expect that both w̃s−1 and wt−1 will be closer
and closer to each other, leading to decaying variance, and
a much faster convergence rate, compared to Oja’s algorithm.

Pn
Theorem 1. Define A as n1 XX > = n1 i=1 xi x>
i , and
let v1 be an eigenvector corresponding to its largest eigenvalue. Suppose that

Before continuing to the algorithm’s analysis, we make two
important remarks:

Let δ,  ∈ (0, 1) be fixed. If we run the algorithm with any
epoch length parameter m and step size η, such that

Remark 1. To generalize the algorithm to find multiple
singular vectors (i.e. solve Eq. (2) for k > 1), one option is to replace the vectors wt , wt0 , w̃, ũ by d × k matrices Wt , Wt0 , W̃ , Ũ , and replace the normalization step
1
0
3
kwt0 k wt by an orthogonalization step . This generalization
is completely analogous to how iterative algorithms such
as power iterations and Oja’s algorithm are generalized to
the k > 1 case, and the same intuition discussed above
still holds. This is also the option used in our experiments.
Another option is to recover the singular vectors one-byone via matrix deflation: First recover the leading vector
v1 , and then iteratively
the leading
of
Precover
Pj−1 eigenvector
n
>
the deflated matrix n1 i=1 xi x>
−
v
v
,
which
is
i
l=1 l l
precisely vj . This is a standard method to extend power
iteration algorithms to recover multiple eigenvectors, and
our algorithm can be applied to solve it. Algorithmically,
one simply needs
each 
computation of the form
 to replace
Pj−1
>
>
>
xx w with xx − l=1 vl vl w. A disadvantage of
this approach is that it requires a positive eigengap between all top k singular values, otherwise our algorithm
may not converge.
Remark 2. Using a straightforward implementation, the
runtime of each iteration is O(d), and the total runtime
of each epoch is O(dm + ds n), where ds is the average
sparsity of the data points xi . However, a more careful
implementation can improve this to O(ds (m + n)). The
trick is to maintain each wt as αg + β ũ, plus a few additional scalars, and in each iteration perform only a sparse
update of g, and updates of the scalars, all in O(ds ) amortized time. See the supplementary material, Appendix B for
more details.
A formal analysis of the algorithm appears as Thm. 1 below. See Sec. 3 for further discussion of the choice of parameters in practice.
3
I.e. given Wt0 , return Wt with the same column space such
that Wt> Wt = I. Note that the algorithm relies on Wt remaining parameterically close to previous iterates, and Wt0 is a relatively small perturbation of of an orthogonal Wt−1 . Therefore,
it’s important to use an orthogonalization procedure such that Wt
is close to Wt0 if Wt0 is nearly orthogonal, such as Gram-Schmidt.

• maxi kxi k2 ≤ r for some r > 0.
• A has eigenvalues s1 > s2 ≥ . . . ≥ sd , where s1 −
s2 = λ for some λ > 0.
• hw̃0 , v1 i ≥

η≤

√1 .
2

c1 δ 2
λ
r2

mη 2 r2 + r

,
p

c2 log(2/δ)
ηλ

m≥

mη 2 log(2/δ) ≤ c3 ,

(6)

(where c1 , c2 , c3 designates
certain
m positive numerical conl
log(1/)
stants), and for T = log(2/δ) epochs, then with probability at least 1 − dlog2 (1/)eδ, it holds that
hw̃T , v1 i2 ≥ 1 − .
The proof of the theorem is provided in Sec. 4. It is easy
to verify that for any fixed δ, Eq. (6) holds for any suffi1
ciently large m on the order of ηλ
, as long as η is chosen
2
to be sufficiently smaller than
λ/r
.Therefore, by running

2

the algorithm for m = Θ (r/λ)

iterations per epoch,

and T = Θ(log(1/)) epochs, we get accuracy  with high
probability4 1 − dlog2 (1/)eδ. Since each epoch requires
O(ds (m + n)) time to implement, we get a total runtime of
 
 
 r 2 
1
O ds n +
log
,
(7)
λ

establishing
an exponential convergence rate. If λ/r ≥
√
Ω(1/ n), then the runtime is O(ds n log(1/)) – up to logfactors, proportional to the time required just to scan the
data once.
The theorem assumes that we initialize the algorithm with
w̃0 for which hw̃0 , v1 i ≥ √12 . This is not trivial, since
if we have no prior knowledge on v1 , and we choose w̃0
uniformly at random from the unit
√ sphere, then it is wellknown that |hw̃0 , v1 i| ≤ O(1/ d) with high probability.
Thus, the theorem should be interpreted as analyzing the
4
Strictly speaking, this statement is non-trivial only in the
regime of  where log 1  1δ , but if δ is a reasonably small
( 1), then this is the practically relevant regime. Moreover,
as long as the success probability is positive, we can get an algorithm which succeeds with exponentially high probability by
an amplification argument: Simply run several independent instantiations
and pick the solution w for which

P of the >algorithm,
w> n1 n
w is largest.
i=1 xi xi

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

3. Experiments
We now turn to present some experiments, which demonstrate the performance of the VR-PCA algorithm. Rather
than tuning its parameters, we used the following fixed
heuristic: The epoch length m was set to n (number of data
points, or columns in the
Pndata matrix), and η was set to
η = r̄√1 n , where r̄ = n1 i=1 kxi k2 is the average squared
norm of the data. The choice of m = n ensures that at each
epoch, the runtime is about equally divided between the
stochastic updates and the computation of ũ. The choice of
η is motivated by our theoretical
√analysis, which requires η
on the order of 1/(maxi kxi k2 n) in the regime where m
should be on the order of n. Also, note that this choice of η
can be readily computed from the data, and doesn’t require
knowledge of λ.
First, we performed experiments on several synthetic random datasets (where n = 200000, d = 10000), with different choices of eigengap5 λ. For comparison, we also
implemented Oja’s algorithm, using several different step
sizes, as well as power iterations6 . All algorithms were ini5
For each choice of λ, we constructed a d × d diagonal matrix
D, with diagonal (1, 1 − λ, 1 − 1.1λ, . . . , 1 − 1.4λ, q1 , q2 , . . .)
where qi = |gi |/d and each gi was chosen according to a standard
Gaussian distribution. We then let X = U DV > , where U and V
are random d × d and n × d orthogonal matrices. This results in
a data matrix X whose spectrum is the same as D.
6
We note that more sophisticated iterative algorithms, such as
the Lanczos method, can attain better performance than power

log−error

λ = 0.16

λ = 0.05

−2

−2

−4

−4

−6

−6

−8

−8

−10

−10

0

20

40

60

0

20

log−error

λ = 0.016
−2

−2

−4

−4

−6

−6

−8

−8

−10

−10

0

20

40

40

60

0

20
40
# data passes

−4

VR−PCA
Power Iterations
Oja, ηt=1/t

−6

Oja, ηt=3/t

−8

Oja,ηt=9/t

−2

−10

60

λ = 0.005

λ = 0.0016

log−error

algorithm’s convergence after an initial “burn-in” period,
which results in some w̃0 with a certain constant distance
from v1 . This period requires a separate analysis, which
we leave to future work. However, since we only need to
get to a constant distance from v1 , the runtime of that period is independent of the desired accuracy . Moreover,
we note that in our experiments (see Sec. 3), even when
initialized from a random point, no “burn-in” period is discernable, and the algorithm seems to enjoy the same exponential convergence rate starting from the very first epoch.
Finally, since the variance-reduction technique only kicks
in once we are relatively close to the optimum, it is possible to use some different stochastic algorithm with finitetime analysis, such as Oja’s algorithm (e.g. (Balsubramani
et al., 2013)) or (De Sa et al., 2014) to get to this constant accuracy, from which point our algorithm and analysis takes over (for example, the algorithm of (De Sa et al.,
2014) would require at most O(d/λ2 ) iterations, starting
from a randomly chosen point, according to their analysis). In any case, note that some assumption on hw̃0 , v1 i
being bounded away from 0 must hold, otherwise the algorithm may fail to converge in the worst-case (a similar
property holds for power iterations, and follows from the
non-convex nature of the optimization problem).

60

Oja, ηt=27/t
0

20
40
# data passes

Oja, ηt=81/t

60

Oja, ηt=243/t

Figure 1. Results for synthetic data. Each plot represents results
for a single dataset with eigengap λ, and compares the performance of VR-PCA to power iterations and Oja’s algorithm with
different step sizes ηt . In each plot, the x-axis represents the number of effective data passes 
(assuming 2 per epoch forVR-PCA),
>
2
, where w
and the y-axis equals log10 1 − max kX wk
kX > vk2
v:kvk=1

is the vector obtained so far.

tialized from the same random vector, chosen uniformly at
random from the unit ball. Note that compared to our analysis, this makes things harder for our algorithm, since we
require it to perform well also in the ‘burn-in’ phase. The
results are displayed in figure 1, and we see that for all values of λ considered, VR-PCA converges much faster than
all versions of Oja’s algorithm, on which it is based, as well
as power iterations, even though we did not tune its parameters. Moreover, since the y-axis is in logarithmic scale,
we see that the convergence rate is indeed exponential in
general, which accords with our theory. In contrast, the
convergence rate of Oja’s algorithm (no matter which step
size is chosen) appears to be sub-exponential. This is not
surprising, since the algorithm does not leverage the finite
nature of the training data, and the inherent variance in its
updates does not decrease exponentially fast. A similar behavior will occur with other purely stochastic algorithms in
the literature, such as (Arora et al., 2012; Mitliagkas et al.,
2013; De Sa et al., 2014).
Next, we performed a similar experiment using the training data of the well-known MNIST and CCAT datasets.
The MNIST data matrix size is 784 × 70000, and was preiterations. However, they are not directly comparable to power
iterations and VR-PCA, since they are inherently more complex
and can require considerably more memory.

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate
CCAT

MNIST
0
−2

log−error

log−error

−2
−4
−6

−10
0

5

10

15

20

0

5

10

15

20

25

30

15
20
# data passes

25

30

MNIST

CCAT

0

−2

−2
log−error

log−error

−6
−8

−8
−10

−4

−4
−6

−4
−6
−8

−8
−10
−10

0

5

10
# data passes

15

0

5

20

Figure 2. Results for the MNIST and CCAT datasets, using the
same algorithms as in Fig. 1, as well as the hybrid method described in the text (represented by a thinner plain line). See Fig. 1
for a legend.

processed by centering the data and dividing each coordinate by its standard deviation times the squared root of the
dimension. The CCAT data matrix is sparse (only 0.16%
of entries are non-zero), of size 23149 × 781265, and was
used as-is. The results appear in figure 2. We also present
the results for a simple hybrid method, which initializes the
VR-PCA algorithm with the result of running n iterations
of Oja’s algorithm. The decaying step size of Oja’s algorithm is more suitable for the initial phase, and the resulting
hybrid algorithm can perform better than each algorithm
alone.
Finally, we present a similar experiment on the MNIST
and CCAT datasets, where this time we attempt to recover
k > 1 singular vectors using the generalization of VR-PCA
discussed in remark 1. A similar generalization was also
employed with the competitors. The results are displayed
in figure 3, and are qualitatively similar to the k = 1 case.

4. Proof of Thm. 1
To simplify the presentation of the proof, we use a few important conventions:
• Note that the
√ algorithm remains the same if we divide
each xi by r, and multiply η by r. Since maxi kxi k2 ≤
r, this corresponds to running the algorithm with stepsize ηr rather than η, on a re-scaled dataset of points
with squared norm at most 1, and with an eigengap of
λ/r instead of λ. Therefore, we can simply analyze the
algorithm assuming that maxi kxi k2 ≤ 1, and in the end

10

Figure 3. Results for MNIST (for k = 6 singular vectors) and
CCAT(for k = 3 singular vectors).
The y-axis here equals

kX > W k2
F
log10 1 − max
,
with
W ∈ Rd×k being the
2
kX > V k
V :V > V =I

F

current iterate. This directly generalizes the performance measure used in previous figures for the k > 1 case. See Fig. 1 for a
legend.

plug in λ/r instead of λ, and ηr instead of η, to get a
result which holds for data with squared norm at most r.
Pd
>
• Let A =
i=1 si vi vi be an eigendecomposition of
A, where s1 > s2 ≥ . . . ≥ sd , s1 − s2 = λ > 0,
and v1 , . . . , vd are orthonormal vectors. Following the
discussion above, we assume that maxi kxi k2 ≤ 1 and
therefore {s1 , . . . , sd } ⊂ [0, 1].
• Throughout the proof, we use c to designate positive
numerical constants, whose value can vary at different
places (even in the same line or expression).
Part I: Establishing a Stochastic Recurrence Relation
We begin by focusing on a single epoch of the algorithm,
and a single iteration t, and analyze how 1 − hwt , v1 i2
evolves during that iteration. The key result we need is the
following lemma:
Lemma 1. Suppose that hwt , v1 i ≥ 21 , and that
hw̃s−1 , v1 i ≥ 0. If η ≤ cλ, then

 
E 1 − hwt+1 , v1 i2 wt ≤




ηλ
1−
1 − hwt , v1 i2 + cη 2 1 − hw̃s−1 , v1 i2
16
for certain positive numerical constants c.
The proof is rather technical, and appears in the supplementary material, Appendix A. Below, we provide an abridged
version without some of the technical details.

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

Since we focus on a particular epoch s, let us drop the
subscript from w̃s−1 , and denote it simply at w̃. Rewriting the update equations from the algorithm, we have that
w0
wt+1 = kwt+1
0
k , where
t+1

0
wt+1
= (I + ηA)wt + η(xx> − A)(wt − w̃),

kwt − w̃k2 ≤ (kwt − v1 k + kw̃ − v1 k)

and x is the random instance chosen at iteration t.

ai = (1 + ηsi )hwt , vi i , zi = ηvi> (xx> − A)(wt − w̃).
Moreover, since v1 , . . . , vd form an orthonormal basis in
Rd , we have
0
kwt+1
k2 =

d
X

i=1

i=1

0
hvi , wt+1
i2 =

(ai + zi )2 .

Let E denote expectation with respect to x, conditioned on
wt . Based on the above, we have
"
2 #
0


wt+1
2
, v1
E hwt+1 , v1 i = E
0
kwt+1
k
"
#

 0
hwt+1 , v1 i2
(a1 + z1 )2
= E Pd
.
(8)
=E
0
2
kwt+1
k2
i=1 (ai + zi )
Note that conditioned on wt , the quantities a1 . . . ad are
fixed, whereas z1 . . . zd are random variables (depending
on the random choice of x) over which we take an expectation.
The first step of the proof is to simplify Eq. (8), by pushing
the expectations inside the numerator and the denominator. An analysis based on a second-order Taylor expansion
reveals that Eq. (8) can be lower bounded by


E (a1 + z1 )2
i − cη 2 kwt − w̃k2 ,
hP
d
2
E
i=1 (ai + zi )
and since each zi is zero-mean, this equals


E a21 + z12
hP
i − cη 2 kwt − w̃k2
d
2
2
E
i=1 (ai + zi )

(9)

Pd

It can be shown that i=1 zi2 ≤ cη 2 kwt − w̃k2 , hence we
can lower bound the above by
a21
Pd

2
i=1 ai

+

cη 2 kwt

−

w̃k2

− cη 2 kwt − w̃k2 .

2

≤ 2 kwt − v1 k2 + kw̃ − v1 k2

0
It is easy to verify that hwt+1
, vi i = ai + zi , where

d
X

E[hwt+1 , v1 i2 ]) is lower bounded by



ηλ
hwt , v1 i2 1 +
1 − hwt , v1 i2 − cη 2 kwt − w̃k2 .
2
(11)
We now get rid of the kwt − w̃k2 term, by noting that since
(x + y)2 ≤ 2(x2 + y 2 ) and kwt k = kv1 k = 1,

(10)

Plugging in ai = (1 + ηsi )hwt , vi i and performing several
simplifications, it can be shown that Eq. (10) (and hence



= 2 (2 − 2hwt , v1 i + 2 − 2hw̃, v1 i) .
Plugging this back, and performing several manipulations,
we finally get
E[1 − hwt+1 , v1 i2 ]




ηλ
2
+ cη 2 1 − hw̃, v1 i2
≤ 1 − hwt , v1 i
1−
16
as required. Note that to get this bound, we assumed at
several places that η is smaller than either a constant, or a
constant factor times λ (which is at most 1). Hence, the
bound holds by assuming η ≤ cλ for a sufficiently small
numerical c.
Part II: Solving the Recurrence Relation for a Single
Epoch
As before, since we focus on a single epoch, we drop the
subscript from w̃s−1 and denote it simply as w̃.
Suppose that η = αλ, where α is a sufficiently small constant to be chosen later. Also, let
bt = 1 − hwt , v1 i2 and b̃ = 1 − hw̃, v1 i2 .
Then Lemma 1 tells us that if α is sufficiently small, bt ≤
3
4 , and hw̃, v1 i ≥ 0, then

α 
E [bt+1 |wt ] ≤ 1 − λ2 bt + cα2 λ2 b̃.
(12)
16
Lemma 2. Let B be the event that bt ≤ 43 for all t =
0, 1, 2, . . . , m. Then for certain positive numerical constants c, if α ≤ c, and hw̃, v1 i ≥ 0, then


α m
E[bm |B, w0 ] ≤ 1 − λ2
+ cα b̃.
16
Proof. Recall that bt is a deterministic function of the random variable wt , which depends in turn on wt−1 and the
random instance chosen at round m. We assume that w0
(and hence b̃) are fixed, and consider how bt evolves as a
function of t. Using Eq. (12), we have


3
E[bt+1 |wt , B] = E bt+1 |wt , bt+1 ≤
4

α 2
≤ E[bt+1 |wt ] ≤ 1 − λ bt + cα2 λ2 b̃.
16

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

Note that the first equality holds, since conditioned on wt ,
bt+1 is independent of b1 , . . . , bt , so the event B is equivalent to just requiring bt+1 ≤ 3/4.
Taking expectation over wt (conditioned on B), we get that
 i
h
α 

E[bt+1 |B] ≤ E 1 − λ2 bt + cα2 λ2 b̃B
16

α 
= 1 − λ2 E [bt |B] + cα2 λ2 b̃.
16
Unwinding the recursion, and using that b0 = b̃, we therefore get that
E[bm |B] ≤



1−

m−1
X
α 2 m
α i
λ
b̃ + cα2 λ2 b̃
1 − λ2
16
16
i=0

∞ 
X
α 2 m
α i
b̃ + cα2 λ2 b̃
λ
1 − λ2
16
16
i=0


m
α
1
= 1 − λ2
b̃ + cα2 λ2 b̃
16
(α/16)λ2


α m
=
1 − λ2
+ cα b̃.
16

≤



1−

as required.

• |bt+1 − bt | is bounded by cαλ: Since the norm of wt , v1
is 1, we have


|bt+1 − bt | = hwt+1 , v1 i2 − hwt , v1 i2 
= |hwt+1 , v1 i + hwt , v1 i| ∗ |hwt+1 , v1 i − hwt , v1 i|
≤ 2 |hwt+1 , v1 i − hwt , v1 i| ≤ 2kwt+1 − wt k.
Recalling the definition of wt+1 in our algorithm, and
the fact that the instances xi and hence the matrix A are
assumed to have norm at most 1, it is easily verified that
kwt+1 − wt k ≤ cη ≤ cαλ for some constant c.
Armed with these facts, and using the maximal version of
the Hoeffding-Azuma inequality (Hoeffding, 1963), it follows that with probability at least 1 − β, it holds simultaneously for all t = 1, . . . , m (and for t = 0 by assumption)
that
p
bt ≤ b̃ + mcα2 λ2 b̃ + c mα2 λ2 log(1/β)
for some constants c, as long as the expression above is less
than 34 . If the expression is indeed less than 34 , then we get
that bt ≤ 34 for all t. Upper bounding b̃ and λ by 1, and
slightly simplifying, we get the statement in the lemma.

(13)

It remains to prove that if bt ≤ 43 for all t, then hwm , v1 i ≥
0. Suppose on the contrary that hwm , v1 i < 0. Since
|hwt+1 , v1 i − hwt , v1 i| ≤ kwt+1 − wt k ≤ cαλ as we’ve
seen earlier, and hw0 , v1 i ≥ 0, it means there must have
been some wt such that hwt , v1 i ≤ cαλ. But this means
that bt = (1 − hwt , v1 i2 ) ≥ 1 − c2 α2 λ2 > 43 (as long as
α is sufficiently small, since we assume λ is bounded), invalidating the assumption that bt ≤ 34 for all t. Therefore,
hwm , v1 i ≥ 0 as required.

for a certain numerical constant c, then it holds with probability at least 1 − β that

Combining Lemma 2 and Lemma 3, and using Markov’s
inequality, we get the following corollary:

We now turn to prove that the event B assumed in Lemma 2
indeed holds with high probability:
Lemma 3. For certain positive numerical constants c, suppose that α ≤ c, and hw̃, v1 i ≥ 0. Then for any β ∈ (0, 1)
and m, if
p
3
b̃ + cmα2 λ2 + c mα2 λ2 log(1/β) ≤ ,
4

p
3
bt ≤ b̃ + cmα2 λ2 + c mα2 λ2 log(1/β) ≤
4
for some numerical constant c and for all t
0, 1, 2, . . . , m, as well as hwm , v1 i ≥ 0.

=

Proof. To prove the lemma, we analyze the stochastic process b0 (= b̃), b1 , b2 , . . . , bm , and use a concentration of
measure argument. First, we collect the following facts:
• b̃ = b0 ≤ 34 : This directly follows from the assumption
stated in the lemma.

Lemma 4. Let confidence parameters β, γ ∈ (0, 1) be
fixed. Suppose that hw̃, v1 i ≥ 0, and that m, α are chosen such that
p
3
b̃ + cmα2 λ2 + c mα2 λ2 log(1/β) ≤
4
for a certain numerical constant c. Then with probability
at least 1 − (β + γ), it holds that hwm , v1 i ≥ 0, and

1 
α m
bm ≤
1 − λ2
+ cα b̃.
γ
16
for some numerical constant c.

• The conditional expectation of bt+1 is close to bt , as long
Part III: Analyzing the Entire Algorithm’s Run
as bt ≤ 34 : Supposing that bt ≤ 34 for some t, and α is
Given the analysis in Lemma 4 for a single epoch, we are
sufficiently small, then by Eq. (12),
now ready to prove our theorem. Let

α 2
2 2
2 2
E [bt+1 |wt ] ≤ 1 − λ bt + cα λ b̃ ≤ bt + cα λ b̃.
16
b̃s = 1 − hw̃s , v1 i2 .

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

By assumption, at the beginning of the first epoch, we have
b̃0 = 1 − hw̃0 , v1 i2 ≤ 1 − 12 = 12 . Therefore, by Lemma 4,
for any β, γ ∈ 0, 21 , if we pick any
α≤

1 2
γ
2

such that

48 log(1/γ)
αλ2
p
1
3
+ cmα2 λ2 + c mα2 λ2 log(1/β) ≤ ,
2
4
(14)
and

m≥

then we get with probability at least 1 − (β + γ) that



 48 log(1/γ)
2
2
αλ
αλ
1
1
1−
+ γ 2  b̃0
b̃1 ≤
γ
16
2
Using the inequality (1 − (1/x))ax ≤ exp(−a), which
holds for any x > 1 and any a, and taking x = 16/(αλ2 )
and a = 3 log(1/γ), we can upper bound the above by


 

1
1
1
exp −3 log
+ γ 2 b̃0
γ
γ
2


1
1
=
γ 3 + γ 2 b̃0 ≤ γ b̃0 .
γ
2
Therefore, we get that b̃1 ≤ γ b̃0 . Moreover, again by
Lemma 4, we have hw̃1 , v1 i ≥ 0. Since b̃1 is only smaller
than b̃0 , the conditions of Lemma 4 are fulfilled for b̃ = b̃1 ,
so again with probability at least 1 − (β + γ), by the same
calculation, we have b̃2 ≤ γ b̃1 ≤ γ 2 b̃0 . Repeatedly applying Lemma 4 and using a union bound, we get that after
T epochs, with probability at least 1 − T (β + γ),
1 − hw̃T , v1 i2 = b̃T ≤ γ T b̃0 < γ T .
Therefore, for any desired
l accuracy
m parameter , we simlog(1/)
ply need to use T = log(1/γ)
epochs, and get 1 −
hw̃T l, v1 i2 ≤ m with probability at least 1 − T (β + γ) =
log(1/)
1 − log(1/γ)
(β + γ).
Using a confidence parameter δ, we pick β = γ = 2δ ,
which ensures that the accuracy bound above holds with
probability at least





 
log(1/)
1
log(1/)
1−
δ ≥ 1−
δ = 1− log2
δ.
log(2/δ)
log(2)

Substituting this choice of β, γ into Eq. (14), and recalling
that the step size η equals αλ, we get that hw̃T , v1 i2 ≥ 1−
with probability at least 1 − dlog2 (1/)eδ, provided that
c log(2/δ)
, m≥
,
ηλ
p
mη 2 + mη 2 log(2/δ) ≤ c

η ≤ cδ 2 λ

for suitable constants c.

To get the theorem statement, recall that this analysis pertains to data whose squared norm is bounded by 1. By the
reduction discussed at the beginning of the proof, we can
apply it to data with squared norm at most r, by replacing
λ with λ/r, and η with ηr, leading to the condition
cδ 2
λ
r2

c log(2/δ)
, m≥
,
ηλ
p
mη 2 r2 + r mη 2 log(2/δ) ≤ c.

η≤

Recalling that the different c’s correspond to possibly different numerical constants, we get the theorem statement.

5. Discussion
In this paper, we presented and analyzed a stochastic algorithm for PCA and SVD with an exponential convergence
rate. Under suitable assumptions, the runtime scales as the
sum of the data size n and an eigengap factor λ12 , and logarithmically in the required accuracy . In contrast, the runtime of previous iterative methods scale either as the product of n and an eigengap factor, or polynomially in .
This work leaves several open questions. First, we note
that in the regime of moderate data size n (in particular, when n is dominated by (r/λ)2 ), the required runtime scales with 1/λ2 , which is inferior to the deterministic methods discussed in Sec. 1. Second, in the context
of strongly convex optimization problems, the variancereduced technique
weuse leads to algorithms with runtime

O d n + λ1 log 1 , where λ is the strong convexity
parameter of the problem (Johnson & Zhang, 2013). Comparing this with our algorithm’s runtime, and drawing a
parallel between strong convexity and the eigengap in PCA
problems, it is tempting to conjecture that the 1/λ2 in our
runtime analysis can be improved at least to 1/λ. However,
we don’t know if this is true, or whether the 1/λ2 factor is
necessary in our setting. Third, it remains to analyze the
behavior of the algorithm starting from a randomly initialized point, before we obtain some w̃0 sufficiently close to
the optimum. Experimentally, this does not seem to be an
issue, but a full analysis would be more satisfactory, and
might give more guidance on how to optimally choose the
step size. Finally, we believe our formal analysis should be
extendable to the k > 1 case (see remark 1), and that the
dependence on the maximal squared norm of the data can
be relaxed to a dependence on the average squared norm or
some weaker moment conditions.
ACKNOWLEDGMENTS
This research is supported in part by an FP7 Marie Curie
CIG grant, the Intel ICRI-CI Institute, and Israel Science
Foundation grant 425/13. We thank Huy Nguyen for spotting a bug in the proof of lemma 1 in an earlier version of
this paper.

A Stochastic PCA and SVD Algorithm with an Exponential Convergence Rate

References
Arora, R., Cotter, A., Livescu, K., and Srebro, N. Stochastic optimization for PCA and PLS. In 2012 50th Annual Allerton Conference on Communication, Control,
and Computing, 2012.
Arora, R., Cotter, A., and Srebro, N. Stochastic optimization of PCA with capped MSG. In NIPS, 2013.
Balsubramani, A., Dasgupta, S., and Freund, Y. The fast
convergence of incremental PCA. In NIPS, 2013.
De Sa, C., Olukotun, K., and Ré, C. Global convergence of
stochastic gradient descent for some nonconvex matrix
problems. arXiv preprint arXiv:1411.1134, 2014.
Frostig, R., Ge, R., Kakade, S., and Sidford, A. Competing
with the empirical risk minimizer in a single pass. CoRR,
abs/1412.6606, 2014.
Golub, G. and van Loan, C. Matrix computations (4. ed.).
Johns Hopkins University Press, 2013.
Hoeffding, W. Probability inequalities for sums of bounded
random variables. Journal of the American statistical
association, 58(301):13–30, 1963.
Johnson, R. and Zhang, T. Accelerating stochastic gradient
descent using predictive variance reduction. In NIPS,
2013.
Konecný, J. and Richtárik, P. Semi-stochastic gradient descent methods. CoRR, abs/1312.1666, 2013.
Krasulina, T.P. The method of stochastic approximation
for the determination of the least eigenvalue of a symmetrical matrix. USSR Computational Mathematics and
Mathematical Physics, 9(6):189–195, 1969.
Mahdavi, M., Zhang, L., and Jin, R. Mixed optimization
for smooth functions. In NIPS, 2013.
Mitliagkas, I., Caramanis, C., and Jain, P. Memory limited,
streaming PCA. In NIPS, 2013.
Oja, E. Simplified neuron model as a principal component
analyzer. Journal of mathematical biology, 15(3):267–
273, 1982.
Oja, E. and Karhunen, J. On stochastic approximation of
the eigenvectors and eigenvalues of the expectation of a
random matrix. Journal of mathematical analysis and
applications, 106(1):69–84, 1985.

