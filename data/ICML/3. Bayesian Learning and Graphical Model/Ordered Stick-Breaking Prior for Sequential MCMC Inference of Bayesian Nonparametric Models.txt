Ordered Stick-Breaking Prior for Sequential MCMC Inference of Bayesian
Nonparametric Models

Mrinal Das†
Trapit Bansal†
Chiranjib Bhattacharyya†
†Department of Computer Science and Automation,
Indian Institute of Science, Bangalore, India

Abstract
This paper introduces ordered stick-breaking
process (OSBP), where the atoms in a stickbreaking process (SBP) appear in order. The
choice of weights on the atoms of OSBP ensure that; (1) probability of adding new atoms
exponentially decrease, and (2) OSBP, though
non-exchangeable, admit predictive probability
functions (PPFs). In a Bayesian nonparametric (BNP) setting, OSBP serves as a natural
prior over sequential mini-batches, facilitating
exchange of relevant statistical information by
sharing the atoms of OSBP. One of the major
contributions of this paper is SUMO, an MCMC
algorithm, for solving the inference problem
arising from applying OSBP to BNP models.
SUMO uses the PPFs of OSBP to obtain a Gibbssampling based truncation-free algorithm which
applies generally to BNP models. For large scale
inference problems existing algorithms such as
particle filtering (PF) are not practical and variational procedures such as TSVI (Wang & Blei,
2012) are the only alternative. For Dirichlet process mixture model (DPMM), SUMO outperforms TSVI on perplexity by 33% on 3 datasets
with million data points, which are beyond the
scope of PF, using only 3GB RAM.

1. Introduction
Bayesian nonparametric (BNP) models are powerful tools
for understanding probabilistic relationships (Hjort et al.,
2010). Inference in BNP models are generally intractable.
Markov chain Monte Carlo (MCMC) (Andrieu et al., 2003)
Proceedings of the 31 st International Conference on Machine
Learning, Lille, France, 2015. JMLR: W&CP volume 37. Copyright 2015 by the author(s).

MRINAL @ CSA . IISC . ERNET. IN
TRAPIT @ CSA . IISC . ERNET. IN
CHIRU @ CSA . IISC . ERNET. IN

based procedures being easy to implement and more accurate than variational inference (Blei & Jordan, 2004;
Welling et al., 2012) are often preferred. However MCMC
procedures do not scale well to large datasets.
For large datasets one could consider sequentially processing mini-batches of observations. Particle filtering (PF) is a
principled technique which sequentially approximates the
full posterior using particles (Doucet et al., 2001; Ulker
et al., 2010; Andrieu et al., 2010; Fearnhead, 2004; Jun
& Coute, 2014). However, due to the nature of recursive
dependence structure employed in PF, it needs to maintain
multiple configurations of variables, which makes it practical only in distributed setting (Canini et al., 2009; Ahmed
et al., 2011). Keeping this motivation in mind truncationfree stochastic variational inference (TSVI) was developed
(see Section 1, para 2 of Wang & Blei (2012)). Indeed, for
pure sequential inference, stochastic variational inference
(SVI) has become the state of the art in large scale inference of BNP models (Bryant & Sudderth, 2012; Lin, 2013;
Broderick et al., 2013). We aim to develop MCMC procedures which can compete with TSVI on scale and accuracy.
In particular we consider the situation where data arrives in
mini-batches and keeping in mind a true Bayesian spirit we
wish to endow the mini-batches with a suitable prior.
Stick-breaking process (SBP) (Ishwaran & James, 2001)
gives a constructive definition for designing atomic probability measures which can serve as priors for BNP models. Indeed popular priors such as Dirichlet process (DP)
(Ferguson, 1973), and Pitman-Yor process (PYP) (Pitman
& Yor, 1997) are special cases of SBP. In this paper we
study an interesting variation of SBP, where the atoms appear in order. Appearing in order has been noted by Pitman
(1995), however we did not find any literature in the area
which models it in a prior and subsequently applies it to
Bayesian nonparametrics. The goal of this paper is to explore SBP with atoms appearing in order as a prior over
mini-batches and develop sequential MCMC inference that
could compete with TSVI on scale and PF on accuracy.

OSBP for Sequential MCMC Inference of BNP Models

Contributions. Our contribution is two-fold in this paper.
The main technical contribution is to propose a novel BNP
prior, ordered stick-breaking process (OSBP), where
atoms in the stick-breaking framework appear in order.
An interesting property of OSBP is that, probability of
new atom can decrease exponentially as more and more
atoms arrive (see Theorem 2). Predictive probability functions (PPFs) are useful tools for designing MCMC based
truncation-free inference algorithms. In general, SBP
based priors do not admit PPFs except in special cases like
DP and PYP. Surprisingly, despite having parameter setting
as general as SBP, one can derive the PPFs of OSBP (see
Theorem 3), making it an extremely attractive candidate to
be used as a prior for BNP models. Our second contribution is to apply OSBP to exchange relevant statistical information in mini-batches by sharing atoms. We describe
SeqUential MCMC inference through OSBP (SUMO), an
MCMC inference algorithm, which can approximate the
full posterior distribution for a general class of BNP models by sharing atoms of OSBP across mini-batches. Memory overhead of SUMO is low as the memory scales with
the number of atoms that needs to be shared and due to
OSBP only a small number of atoms need to be shared
(see Theorem 2). SUMO thus marks a significant progress
on developing sequential MCMC algorithms for massive
datasets. In our experiments with three publicly available
large scale corpora namely New York Times (100M tokens), PubMed abstracts (730M tokens) and Wikipedia English subset (296M tokens), using only 3GB RAM, SUMO
with Dirichlet process mixture models (DPMM) outperforms TSVI (Wang & Blei, 2012) in terms of perplexity
by 33% with competitive run-time memory usage. Solving
such large scale inference problem in sequential setting is
beyond the scope of MCMC and PF.
Structure of the paper. In Section 2, we propose OSBP
and derive PPF. In Section 3, we apply OSBP on BNP models and derive the sequential inference procedure SUMO.
Discussing relevant work in Section 4, we provide the empirical study in Section 5 on four real life datasets comparing SUMO with MCMC, PF and TSVI.
Notation. We will use following notations throughout
the paper. Γ is a diffuse probability measure over a suitable measurable space (Ω, B), more precisely for any y ∈
Ω, Γ(y) = 0. δy will denote an atomic probability measure, the entire probability mass being concentrated at y.
E[X] is the expectation of random variable X. A set of
variables {x1 , x2 , . . . , xn } will be denoted by x1:n . {xj }
will denote an infinite set, and (xj ) will denote an infinite sequence, j specifying the order. The set of integers
{1, . . . , k} will be denoted by [k]. I[.] denotes the indicator
function, and |.| means cardinality. N is the set of all positive integers. If P and Q are two measures we will use P = Q
to denote that P and Q are same i.e. ∀B ∈ B, P(B) = Q(B).

2. Ordered stick-breaking process: Stick
breaking with atoms appearing in order
In this section we propose the ordered stick-breaking process (OSBP). We begin by recollecting some relevant preliminaries for defining OSBP.
2.1. Preliminaries
Stick-breaking process. Any almost sure (a.s.) discrete
probability measure G is a stick-breaking process (SBP)
(Ishwaran & James, 2001) if it can be represented as
P∞
Qj−1
G=
j=1 θj δβj , θ1 = v1 , θj = vj
l=1 (1 − vl )
aj , bj > 0, vj ∼ Beta(aj , bj ), βj ∼ H

(1)

H is a diffuse measure over a measurable space (Ω, B) and
{aj , bj } are set of parameters.

Order of the atoms in SBP. The constructive definition
of SBP in Eq. (1) allows us to define an order among
the atoms. Let (Y1 , Y2 , . . . , Yn ) denotes n random samples drawn from G in Eq. (1). If j < l, then p(Yi =
βj |v1 , . . . , vj , . . . , vl , . . .) = p(Yi = βj |v1 , . . . , vj−1 , vj ).
Therefore, we get a strict ordering among the atoms {βj }
which is defined by their indices j in Eq. (1).
Appearance in order (Pitman, 1995). Let (Yi )t1 be sequence of random variables with values in some measurable space (Ω, B), and {Ȳ1 , Ȳ2 , . . . , Ȳkt } denotes the set
of unique values among (Yi )t1 . Define Bj = {i|Yi =
Ȳ j , i ∈ [t]}. The set ( Y i )t1 is said to appear in order
if B1 ∪ B2 ∪ . . . ∪ Bkt = [t] where 1 ∈ B1 and for
2 ≤ j ≤ kt , Bj ⊆ [t] is such that the least element of
[t]\ ∪j−1
l=1 B l belongs to B j . ( Ȳ j ) are also in order i.e if
Y i = Ȳ j and Y m 6= Ȳ j , ∀m < i then @l < i such that
Y l = Ȳ j+r where r ≥ 0. See that B i ∩ B j = ∅ and hence
B j ’s form a partition and is known as an ordered partition.
See §S.3 in the supplementary material for an example.
Note that, any appearing in order sequence of random variables are not exchangeable. But any non-exchangeable sequence of random variables do not follow appearance in
order. The notion of ordered partition is important.
2.2. Ordered stick-breaking process
We define ordered stick-breaking process (OSBP) here for
atoms appearing in order. We then discuss properties of
OSBP in Lemma 1, Theorems 1, 2 and 3.
Let Γ be a diffuse probability measure over random measures, and µ, ν denote the set of scalar hyper-parameters
{µj } and {νj } respectively such that 0 < µj < 1,
νj > 0, ∀j. (G1 , G2 , . . .) is an appearing in order
sequence of random measures. (Q1 , . . . , Qkt−1 ) is the
set of kt−1 unique values among G1:t−1 . We define,
G 1 , G 2 , . . . ∼ OSBP(µ, ν, Γ) if G 1 ∼ Γ and for any t ≥ 2,

OSBP for Sequential MCMC Inference of BNP Models

the following holds:
G t | G 1:t−1 , (ρj ), Γ

∼

distribution (Connor & Mosimann, 1969). Furthermore,
if (1 − µj−1 )νj−1 = νj for j, 2 ≤ j ≤ kt−1 , then Rt ∼
Dirichlet(µ1 ν1 , µ2 ν2 , . . . , µkt−1 νkt−1 , (1−µkt−1 )νkt−1 ).

Pkt−1

ρj δQj + αkt−1 Γ
Qj−1
ρ1 = v1 , ∀j > 1, ρj = vj l=1 (1 − vl )
j=1

vj |µj , νj ∼ Beta (µj νj , (1 − µj )νj )
Pkt−1
αkt−1 = 1 − j=1
ρj

Proof. See §S.4.2 in the supplementary material.
(2)

Note that, Q1 = G1 , and (Qj ) appear in the order given
by the index j. Notice that, implicitly ∀t, αkt ≥ 0 and
Pkt−1
∀j, ρj ≥ 0, as well as j=1
ρj + αkt−1 = 1. Gt can
re-use existing Qj with probability ρj when kt = kt−1 .
G t can use a newly sampled value from base measure Γ
with innovation probability αkt−1 , and in that case, kt =
kt−1 + 1 and Qkt = Gt . Following preliminaries, we define
Bj

= {t|Gt = Qj }, zt = j iff Gt = Qj

(3)

Notice that (B1 , B2 , . . . , Bkt ) is an ordered partition and
zt ∈ [kt−1 + 1] a.s. Γ being a diffuse measure, Qkt is a.s.
distinct from Q1:kt−1 . To be definite, Γ can be DP.
2.3. Properties of OSBP
As the atoms in OSBP appear in order, OSBP forms a dynamic system that evolves with t, when
kt ≥ kt−1 , αkt ≤ αkt−1

(4)

This property of OSBP, can be seen directly from the definition and leads to an interesting result below regarding the
asymptotic behavior of OSBP.
Pkt−1
Theorem 1. If P1 = Γ, Pt = j=1
ρj δQj +αkt−1 Γ for t >
P∞
P∞
∗
1 and P =
j=1 ρj δQj such that
j=1 ρj = 1, where
(ρj ), (Qj ), αkt and Γ as defined in Eq. (2) with parameter
µ, ν, then limt→∞ Pt = P∗ a.s.
Proof. See §S.4.1 in the supplementary material.
Theorem 1 says that, OSBP asymptotically obtains a nonevolving probability measure a.s. when no new atom appears. Moreover, even with infinite number of atoms,
OSBP gives a valid probability measure. This asymptotic property is significant to understand the behavior of
OSBP based BNP models, for example P∗ behaves like
SBP and leads to independent and identically distributed or
iid (hence exchangeable and marginally invariant) samples.
It also becomes important to understand how quickly Pt
stops evolving, which depends on the probability masses
over the atoms (ρj ) and αkt . Notice that, (ρj ) and αkt
are defined with random variables (vj ) that introduces the
parameters (µ, ν). From properties of Beta distribution,
µ (1−µ )
E[vj ] = µj and V ar(vj ) = j1+νj j . One can set expected value of vj with µj , where precision is governed by
νj . (ρj ) follows a distribution as noted below.
Lemma 1. For any t ∈ N, Rt = (ρ1 , ρ2 , . . . , ρkt−1 , αkt−1 )
as defined in Eq. (2) is distributed as generalized Dirichlet

Next we state one important result which says probability
of adding new atoms can decrease exponentially with time.
Theorem 2. For αkt as defined in Eq. (2) with parameters
µ, ν, and any  ∈ (0, 1), if µj > 1/2 for all j, then αk ≤ 
whenever k ≥ log2 2 log 1 with probability more than 1 − .
Proof. See §S.4.3 in the supplementary material.
Theorem 2 allows one to ensure that kt does not increase
by too much. Precisely, this is an extremely useful property
of OSBP which has a direct bearing on the memory footprint of the MCMC algorithm developed later in Section
3.2. Next we derive PPFs of OSBP.
2.4. Predictive probability functions (PPFs) for OSBP
PPFs are useful tools to design MCMC inference algorithms for BNP models. SBP in general does not admit
PPFs except in special cases such as DP and PYP (Ishwaran
& James, 2001). Although OSBP has parameter setting as
general as SBP, in this section we demonstrate that OSBP
has easy to evaluate PPFs which will be exploited later to
design a truncation-free MCMC inference procedure.
Let
P zt and Bj be defined as in Eq. (3) and gj = |Bj |, hj =
l>j gl . PPF (πj , j ∈ [kt−1 ] and σkt−1 ) are defined by
Pitman (1996) as
πj = p(zt = j|z1:t−1 , Θ), j ∈ [kt−1 ],
σkt−1 = p(zt = kt−1 + 1|z1:t−1 , Θ)

(5)

where Θ denotes the set of hyper-parameters. In words,
πj is the probability of next sample Gt from OSBP to be
same as Qj , and with probability σkt−1 , Gt = Qkt−1 +1 , a
new sample from base measure Γ. Notice that, implicitly
Pkt−1
j=1 πj + σkt−1 = 1. We state an intermediate lemma
useful for deriving the PPF of OSBP.
Lemma 2. Let, (vj ) be defined as in Eq. (2),
and G1:t−1 |µ, ν, Γ ∼ OSBP (µ, ν, Γ).
Then ∀j,
vj |z1:t−1 , µj , νj ∼ Beta(µj νj + gj − 1, (1 − µj )νj + hj ).
Proof. See §S.5.1 in the supplementary material.
We are now ready to state the main result of this section.
Theorem 3. Let (πj ), σkt−1 be defined in Eq. (5), and
G 1:t−1 |µ, ν, Γ ∼ OSBP (µ, ν, Γ). Then, we have:
µj νj +gj −1 Qj−1 (1−µl )νl +hl
πj = νj +g
l=1 νl +gl +hl −1 , j ∈ [kt−1 ],
j +hj −1
Qkt−1 (1−µl )νl +hl
σkt−1 = l=1 νl +gl +hl −1
(6)
Proof. See §S.5.2 in the supplementary material.

OSBP for Sequential MCMC Inference of BNP Models

Pkt−1
Qkt−1 (1−µl )νl +hl
It is easy to see that, 1 − l=1
πl = l=1
νl +gl +hl −1 ,
Pkt−1
therefore j=1 πj + σkt−1 = 1. Thus we get the PPFs of
OSBP in (6). See §S.3 in the supplementary material for
more discussion on OSBP and PPFs of OSBP.

3. Sequential MCMC inference through
OSBP (SUMO)
In this section, we develop SeqUential MCMC inference
through OSBP (SUMO). After discussing the relevant
background, we propose SUMO and discuss its properties
followed by specifying SUMO for text datasets.

form the state of the art in sequential inference of BNP
models. They follow two different strategies. PF builds
a recursive dependence over local variables (Φt ) by integrating out global variables ϕ, that makes them to store
multiple configurations of O(n) making them feasible only
in distributed setup. Whereas, TSVI by employing SVI develops recursive dependence only on global variables ϕ and
reduces memory requirement successfully.
The challenge with MCMC to apply on large datasets is
that, no suitable analog of SVI is known in MCMC family
that will scale well. We propose our solution below.
3.2. SUMO by applying OSBP on BNP models

3.1. Background
Global and local variables in BNP models. Many hierarchical BNP models can be described generally as
Qn
p(ϕ, φ1:n , x1:n ) = p(ϕ) i=1 p(xi |φi )p(φi |ϕ) (7)
n is the number of observations, {φi }n1 are the local latent
variables, one for each observation xi , and ϕ denotes the
global variables common to the entire dataset. We consider Dirichlet process mixture model (DPMM) (Escobar
& West, 1995) as an example of Eq. (7) to describe our
approach and show few more examples on PYP (Pitman,
1996), SBP (Ishwaran & James, 2001) and hier-archical DP
(Teh et al., 2006) in §S.7 of the supplementary.
Dirichlet process mixture model (DPMM). Using vs ∼
Beta(1, γ) for some γ > 0 in Eq. (1) one obtains Dirichlet
process DP (γ, H), and we write G ∼ DP (γ, H) (Sethuraman, 1994). DPMM can be described as
∀i, xi ∼ f (φi ), φi |G ∼ G, G ∼ DP (γ, H) (8)
P∞
Recall that, G can be expressed as G = s=1 θs δβs . The
atoms βs ∼ H and (θs ) ∼ GEM (γ). {θs , βs } are the
global variables and {φi } are the local variables.
MCMC is not scalable.
MCMC inference of the
DPMM model involves integrating out G and computing
−i
p(φi |φ−i
1:n , x1:n ) ∝ p(xi |φi )p(φi |φ1:n ) for all i = 1, . . . , n
iterating multiple times. For large scale datasets when n
is very high, it is not possible to maintain all the variables
making the MCMC inference infeasible.
Sequence of mini-batches. To infer from large datasets,
one can split the observations {xi }n1 into mini-batches
¯
{Xt }d1 . In the tth mini-batch, Xt = {xi }n̄t
i=n̄(t−1)+1 , a
collection of n̄ data points need to be processed1 which
is feasible. The mini-batches (Xt ) are sequentially processed to approximate the posterior p(Φ1:d¯, ϕ|X1:d¯) recursively, where Φt = {φi }n̄t
i=n̄(t−1)+1 .
State of the art sequential algorithms. PF (Fearnhead,
2004; Canini et al., 2009) and TSVI (Wang & Blei, 2012)
1

¯
for simplicity we have assumed n = n̄d.

Utilizing the appearance in order property, we build sequential dependence across mini-batches for BNP models
using OSBP. The attendant MCMC inference is SUMO.
3.2.1. OSBP PRIOR ON BNP MODELS
We apply OSBP to exchange relevant statistical information across mini-batches for DPMM as below.
= Q1 ; ∀j, Qj ∼ DP (γj , H)
Pkt−1
∀t > 1, Gt |G1:t−1 , H ∼ j=1
ρj δQj + αkt−1 δQkt−1 +1
G1

∀i, xti |φti ∼ f (φti ),

φti |Gt ∼ Gt

(9)

(ρj ) and αkt−1 are as defined in Eq. (2) of OSBP.
(Q1 , . . . , Qkt−1 ) is the set of unique values among G1:t−1
and Qkt−1 +1 is pre-sampled. The second line in Eq. (9)
models DPMM with Gt similar to Eq. (8).
Hyper-parameter settings. The hyper-parameters are
µ, ν due to OSBP, and (γj ) for DP. We set ∀j, µj = µ
for some 0.5 < µ < 1. νj = (1 − µ)νj−1 and ν1 = γ
(γ > 0 as in Eq. (8)). So νj = (1 − µ)j−1 γ. We use,
γj = µνj and hence γj = µ(1 − µ)j−1 γ. Thus, we have
only two hyper-parameters µ and γ.
Equivalence with DPMM. Note that, formulation Eq. (9)
trivially becomes equivalent to DPMM (Eq. (8)) in batch
mode. Moreover, we can state an important result as below.
Theorem 4. For any t ∈ N, each xti sampled using
model Eq. (9) has marginal distribution same as xi sampled with DPMM in Eq. (8) with G ∼ DP (ct , H), where
Pkt−1
ct = j=1
γj +(1−µ)kt−1 γ. Furthermore, for any  > 0
and t > 0, with probability greater than 1 − , each xti in
Eq. (9) hasP
marginal distribution same as xi in Eq. (8) with
k
1
2
G ∼ DP ( j=1 γj , H ), when kt ≥ k ≥ log
2 log  . Also,
for t → ∞, each xti in Eq. (9) has marginal distribution
same as xi in Eq. (8) with G ∼ DP (γ, H).
Proof. See §S.6.1 in the supplementary material.
Theorem 4 signifies that at every mini-batch all data points
are equivalently sampled from a DPMM model which dif-

OSBP for Sequential MCMC Inference of BNP Models

Algorithm 1 SUMO. SeqUential MCMC Inference
through OSBP.
Require: (Xt )
1: for t = 1, 2, . . . do
2:
Initialize sufficient statistics S
3:
for iter = 1 to I do
4:
{total user-defined number of iterations}
5:
for i = 1 to n̄ do
6:
Compute p(φti |Φ−i
t , X t , S)
{local variable inference}
7:
end for
8:
Compute p(Gt , ρ1:kt , H, |Φt , Xt , G1:t−1 , S)
{global variable inference}
9:
end for
10:
Update sufficient statistics S
11:
Discard local variables {Xt , Φt }.
12: end for

fers with DPMM in Eq. (8) only in the scale parameter of
DP. The scale parameter stops varying with high probability after initial stage and converges to the actual scale
parameter γ asymptotically, when Eq. (9) makes loss-less
approximation of DPMM in Eq. (8).
3.2.2. SUMO ALGORITHM
The attendant inference algorithm of Eq. (9) gives us the
MCMC scheme, SUMO. We describe the SUMO approach
in Algorithm 1. Step 4 to 6 corresponds to MCMC local
to mini-batch t for inferring local variables Φt . Step 7 updates the global variables based on local variables Φt and
sufficient statistics S. Due to conditional independence of
{Xt , Φt } and {Xt+1 , Φt+1 } given (Gt ) and S, SUMO at
step 9 deletes local variables {Xt , Φt } after updating S at
step 8. Step 4 to 6 is similar to MCMC. SUMO differs with
MCMC at step 7 which also incurs slightly additional time
complexity, which is tolerable given the benefit in memory
reduction to apply on large datasets. We defer the details
of inference considering a data model to Section 3.4, and
discuss the properties below.

inference scheme. Posterior in each time stamp t is approximated using MCMC or Gibbs sampling leading to accurate
approximation. Using Eq. (11) we represent the posterior
of the global and local variables at time t which are used
in Eq. (10). Due to Theorem 4 SUMO approximates the
posterior of DPMM ignoring initial period.
Difference with PF. Generally MCMC performs better
than PF to approximate full posterior if the dataset is not
inherently sequential as noted by Fearnhead (2004). PF
allows mini-batch processing of large datasets as an alternative to MCMC. But, PF integrates out ϕ and at time t,
approximates p(Φt |Xt ) using particles and by utilizing a recursive dependence of p(Φt+1 |Φ1:t ) moves on to the next
mini-batch. Due to recursive dependence over local variables using particles, PF needs to maintain multiple configurations of local variables which makes it practical only in
distributed setting (Canini et al., 2009; Ahmed et al., 2011;
Williamson et al., 2013).
Reduction in memory requirement. As noted earlier, due
to conditional independence of local variables {Xt , Φt } and
{Xt+1 , Φt+1 } given (Gt ) and S, posterior at time t using
Eq. (10) does not involve Φ1:t−1 , X1:t−1 . Discarding the
local variables at step 8 in Algorithm 1, SUMO requires
memory for mini-batch specific local variables Φt , Xt and
global variables for G1:t , ρ1:kt , S, which is O(n̄ + kt × Kt )
(Kt is number of parameters for H). This is a much smaller
quantity than O(n), complexity of MCMC and PF. Moreover, n̄ can be set conveniently. n̄ + kt × Kt can be in
hundreds whereas n is in million (e.g. PubMed dataset).
Memory footprint of SUMO grows with kt , that stops increasing after few initial mini-batches (see Theorem 2).
Thus, SUMO by reducing memory usage can process large
datasets which are beyond the scope of MCMC and PF.
Comparison with TSVI. TSVI in a hybrid approach, approximates p(Φt |Xt ) (collapsing ϕ) using MCMC locally
inside a mini-batch, then approximates p(ϕ|Φ1:t , X1:t ) recursively following SVI. Due to the recursive dependence
only on global variables, TSVI reduces memory requirement successfully. TSVI, due to the use of local MCMC, is
the closest approach to SUMO.

3.3. Properties of SUMO
3.4. SUMO instantiated on DPMM for texts
SUMO approximates full posterior sequentially. Following the dependency structure in Eq. (9), we can write
the full posterior p(G1:d¯, ρ1:kd̄ , H, Φ1:d¯|X1:d¯) as
Qd¯
t=1 p(Φt | G t , X t )p( G t |Φt , X t , G 1:t−1 , ρ1:kt , H ) (10)
p(ρ1:kt , H|Φt , G1:t , Xt )
p(G1:t−1 , ρ1:kt−1 , H, Φ1:t−1 |X1:t−1 )

(11)

This shows how we can move from posterior at time t − 1,
p(G1:t−1 , Φ1:t−1 , ρ1:kt−1 , H|X1:t−1 ) to the posterior at time
t, p(G1:t , Φ1:t , ρ1:kt , H|X1:t ) recursively in our sequential

For texts, we assume each data point xti is a document with
{xtil } words. The data model (second line in Eq. (9)) is
∀t, ∀l, xtil |φti ∼ multinomial(φti ), ∀i, φti |Gt ∼ Gt (12)
G t is sampled from OSBP (see Eq. (9)). For conjugacy, φti
has Dirichlet prior. The task is to compute details of step
5, and 7 in Algorithm 1. We outline the inference here and
defer the details to §S.8 in the supplementary material.

Random
P∞variables to infer. From Eq. (9), we can say
Qj =
r=1 ζjr δψjr , where (ζjr ) ∼ GEM (γj ) and ψjr ∼

OSBP for Sequential MCMC Inference of BNP Models

P∞
Let, H ∼ DP (λ, Dirichlet(η)), then H = s=1 θs δβs ,
πj and σkt−1 are as defined in Eq. (6). ιjs , ι0s denote if βs
where βs ∼ Dirichlet(η) and (θs ) ∼ GEM (λ). Thus,
is present in Qj , H respectively. Jjs counts number of times
ψjr ∈ {βs } ensures same components across t without
βs is present among {ψjr }.
invoking ad-hoc merging of components (Newman et al.,
Inference of b. We infer b as below.
2009). Given this setup, we introduce alternative variables
p(bzt r = s|z1:t , A1:t , B1:kt , X1:t ) ∝
(17)
to speed up the mixing of the Markov chain following stan−tr
−r
dard approach. Recall that, zt = j if Gt = Qj as defined in p(Xtr |z1:t , At , B1:kt , X1:t )p(bzt r = s|Bz , z1:t , A1:t , B1:kt )
t
Eq. (3). Let, ati = r if φti = ψjr and zt = j. If s is the in−tr
where p(Xtr |z1:t , At , B1:kt , X1:t ) is Ls (Xtr ) and p(bzt r =
dex of global mixture component represented by ψjr in Qj ,
s|B−r
zt , z1:t , A 1:t , B 1:kt ) comes from CRP as
then we define bjr = s if ψjr = βs . Let, yti = s if zt = j
−zt
and bjr = s. yti is the index of the component assigned
∝ Ls (Xtr )(n−r
zt s + N s )(1 − ιs ) + λ L snew ( X tr )ιs(18)
P
to xti . Due to this representation, the equivalent random
where ιs = I[s=snew ], n−r
=
kt
n̄
t
z
s
q6=r I[bzt q = s] and
t
quantities are A1:t = {{ali }i=1 }l=1 , B1:kt = {bjr }j=1 ,
P
P
k
t−1
−z
Ns t =
and Y1:t = {{yli }n̄i=1 }tl=1 . We integrate out (Qj ) and H
q I[blq = s, l 6= zt ].
l=1
following Chinese restaurant process (CRP), (ρj ) followSUMO for DPMM on texts. Using Eq. (13) in step 5,
ing Theorem 3, and {βs } following Dirichlet multinomial
and Eq. (15), Eq. (17) in step 7 of Algorithm 1, we obconjugacy. So, we need to infer At , B, and zt at time t.
tain SUMO for text datasets. The algorithm is presented
in the supplementary material §S.8. Notice from Eq. (14),
Notation. Superscript with hyphen denotes set minus,
−r
Eq. (16) and Eq. (18) that, by maintaining statistics M, J, N
e.g. X−i
=
X
\x
,
and
X
=
X
\
X
,
where
X
=
t
tr
tr
t
ti
t
t
−ti
and
L , we need not store the local variables ( A , Y , X )1:t−1 .
{xti |ati = r}. X−tr
=
X
\
X
,
and
X
=
X
\x
.
1:t
tr
1:t
ti
1:t
1:t
−ti
A 1:t = A 1:t \ati . B −r
=
B
\b
.
L
(x
)
and
L
(
X
)
zt zt r
s ti
s
tr
zt
are the likelihood of xti and Xtr respectively for mixture
4. Related work
component s. Computation of Ls (xti ) and Ls (Xtr ) is stanExisting stick-breaking priors either assume exchangeabildard following Dirichlet multinomial cojugacy. Next we
ity among partitions and hence atoms such as DP, PYP
describe inference steps, see the supplementary material for
or model spatial dependence among atoms such as πDDP
details and explanation.
(Griffin & Steel, 2006) and local DP (Chung & Dunson,
Inference of a. We infer a as below.
2011). This is significantly different from appearance in order phenomenon which is neither exchangeable nor related
p(ati = r|A−ti
,
B
,
z
,
X
)
∝
(13)
1:k
1:t
1:t
t
1:t
to spatial distances. BNP priors forming sequential depen−i
−i
−ti
p(xti |ati = r, z1:t , A1:t , B1:kt , X1:t )p(ati = r|A1:t , zt )
dency (Lin et al., 2010; Chen et al., 2013) is well known
−i
where p(xti |ati = r, z1:t , A−i
,
B
,
X
)
is
L
(x
).
1:k
b
ti
but none of them define dependency on atoms of an SBP,
t
zt r
1:t
1:t
−ti
neither modeling appearance in order of atoms.
p(ati = r|A1:t , zt ) comes from CRP as
H.

∝ Lbzt r (xti )(m−i
zt r + M zt r )(1 − ιr ) + γbzt L bzt rnew (xti )ιr (14)
Pn̄
where ιr = I[r=rnew ], mzt r =
i=1 I[ati = r] and
Pt−1 Pn̄
M jr =
I[z
=
j,
a
= r]. When a
l
li
l=1
i=1
new rnew is sampled we obtain bzt rnew from p(bzt r =
snew |z1:t , A1:t , B1:kt , X1:t ) which is shown later.
Inference of z. Following the dependence structure in
Eq. (9), zt is independent of Xt given Yt . So, we can infer
z from p(zt = j|z1:t−1 , Yt , B1:kt ) as
Qn̄
∝ [ i=1 p(yti = s|z1:t , B1:kt )] p(zt = j|z1:t−1 ) (15)
p(zt = j|z1:t−1 ) comes from Theorem 3. Recall that yti =
bzt ati . So p(yti = s|zt = j, B1:t , z1:t−1 ) comes from CRP
by integrating out Gt and H as
hQ
i
n̄
j
j
0
0
∝
J
(1
−
ι
)
+
γ
ι
J
(1
−
ι
)
+
λι
js
j
.s
s
s
s
s
i=1
h
i
πj (1 − ιj ) + J.s (1 − ι0s ) + λι0s σkt−1 ιj
(16)
where, ι = I[zt = jnew ], ιjs = I[zt = j, s=snew ], ι0s =
Qkt l j
P
Pkt−1
j=1 J js .
l=1 ιs , J js =
r I[bjr = s, zt = j] and J .s =

Although the OSBP based model for DPMM (Eq. (9)) is
not a dependent DP (DDP) model (MacEachern, 2000;
Caron et al., 2008) but use of multiple DP distributions
make it closer to DDP than any other models. The fundamental difference is that, unlike DDP, we do not intend
to modify the DP framework to explore novel probabilistic
relationships in datasets. Eq. (9) is asymptotically equivalent to DPMM. Furthermore, the existing DDP models neither work in mini-batch setting for sequential inference nor
address the memory issue in MCMC inference of DPMM,
what we do here. Equivalence of DP and Dirichlet mixture
of DPs has been used earlier by Williamson et al. (2013) to
make loss-less approximation in distributed setup.

5. Experiments
We experimentally evaluate here the proposed approach
SUMO on DPMM for text datasets as given in Section 3.4.
Objective. Our experimental goals are as follows.
(1) To compare with state of the art methods on held-

Table 1. Four real life datasets used. Two datasets have more than
million data points representing contemporary large scale data.

Perplexity

OSBP for Sequential MCMC Inference of BNP Models
SUMO
TSVI

8000
6000
4000
2000

Documents
1500
300 K
8.2 M
1M

Tokens
1.9 M
100 M
730 M
296 M

Table 2. Comparison of SUMO with MCMC, PF and TSVI on
NIPS. SUMO uses much less memory than MCMC and PF with
much better perplexity than PF and TSVI.

Methods
MCMC
PF
TSVI
SUMO

Perplexity
2196
6432
3740
2386

Memory
480 MB
450 MB
70 MB
110 MB

out data perplexity, a standard metric in BNP experiments
which is suitable to measure how well a model learns the
training data to generalize over the unseen dataset.
(2) To verify memory usage on contemporary large datasets
comparing with state of the art.
(3) To evaluate by varying experimental settings such as
(i) order of the mini-batches, (ii) value of DPMM hyperparameter, and also (iii) size of the mini-batches.
5.1. Datasets, baselines and settings
Datasets. We have used four real world datasets: NIPS
proceedings, New York Times (NYT), PubMed abstracts
(PMA) and Wikipedia English (WPE). Table 1 contains the
details of these datasets. NYT, PMA and NIPS are available at (Bache & Lichman, 2013), and WPE is available at
dumps.wikimedia.org.
Baselines. We evaluate the proposed approach SUMO
comparing with MCMC, PF (Fearnhead, 2004) and TSVI
(Wang & Blei, 2012) using the implementation made available by the authors2 . PF has been used in the same sequential setting. We have used 10K particles to run PF and
removed variables inactive for long time. Number of particles is kept low to reduce memory usage with considerable accuracy. For large datasets, NYT, PMA and WPE,
standard MCMC and PF suffer from out of memory issue.
TSVI is a state of the art with no Monte Carlo family competitor and is also the closest approach as argued in Section
3.3. We compare with TSVI on large datasets.
Experimental settings. We use µ = 0.6 and γ = 0.5,
λ = 5 and η = 0.5. γ and η are kept same for TSVI to
make the underlying model same. We do not learn or tune
2
lists.cs.princeton.edu/pipermail/topicmodels/attachments/20140424/8eea8833/attachment-0001.zip

NIPS

NYT

PMA

WPE

Figure 1. Held-out data perplexity (less is better). SUMO outperforms TSVI on all datasets (average 33%).
Topic Coherence

Dataset
NIPS
NYT
PMA
WPE

−40
−60
−80
−100
−120
−140
−160
−180

SUMO
TSVI
NIPS

NYT

PMA

WPE

Figure 2. Average topic coherence using 10 most probable words
(more is better). SUMO is on average 9% better than TSVI.

parameters. We set η and γ higher than commonly used
in large scale setting as that favors variational inference
over MCMC in general (Asuncion et al., 2009). Parameters specific to TSVI are used as in (Wang & Blei, 2012).
The mini-batch sizes are as follows: 500 for NYT, 100 for
NIPS, and for the much larger datasets of PMA and WPE
we use 10,000. We converted all the characters into small
case and removed special characters. Except NIPS, we removed stop words and limited vocabulary to 10K, 5K, 10K
based on term frequency for NYT, PMA and WPE respectively. We removed documents smaller than 50 tokens.
Computing system. All experiments are done on a system
with single processor of 2.66GHz speed and 3GB RAM.
Held-out data for perplexity. 33%, 10%, 33% and 20%
of datasets are held out (not used in training) for NYT,
PMA, WPE and NIPS respectively to measure perplexity.
Data points were held-out uniformly at random and then
the training datasets were split into mini-batches. Held-out
datasets being small, single batches were used.
5.2. Results
Perplexity. In Table 2 we report results comparing SUMO
with MCMC, PF and TSVI. SUMO outperforms PF and
TSVI and is very close to MCMC. This shows that SUMO
is able to achieve approximation quite close to standard MCMC as argued analytically earlier in Theorem 4.
MCMC and PF could not be run due to memory issue on
NYT, PMA and WPE, where we compare with TSVI.
Figure 1 shows results, where SUMO performs substantially better than TSVI on all datasets with an average margin of 33%. Relatively low perplexity on PMA for both
models is due to the small ratio of held-out test data compared to the training data.
Cluster coherence. We further verify the quality of mixture components (often referred as topics for texts), using topic coherence with 10 highest probability words per
topic. SUMO beats TSVI in most of the cases (Figure 2).

OSBP for Sequential MCMC Inference of BNP Models
500

Perplexity

400
300

k

t
200
100
0
0

SUMO
TSVI

5000
4000
3000
2000

0.5

1
Documents Processed

1.5

2
x

5

0.5

10

1

2

5

γ

SUMO
TSVI

8000

Figure 5. Held-out data perplexity (less is better) for different values of γ on NIPS. SUMO is more stable than TSVI (on average
25% better).

6000
4000
2000
NIPS

NYT

PMA

WPE

Perplexity

Perplexity

Figure 3. Growth of kt on NYT. kt grows fast initially and gradually settles down.

10000
8000
6000
4000

Figure 4. Held-out data perplexity (less is better) by varying order
of mini-batches in NIPS training data (solid line is mean, dashed
lines are actual values). SUMO is consistently better than TSVI
(on average 33%).

5.2.1. M EMORY USAGE
In Table 2, we show results on memory usage comparing
with MCMC, PF and TSVI for NIPS. Memory usage of
SUMO is 4.4 and 4 times less than that of MCMC and PF
respectively. If we retain all particles PF consumes additional 200 MB of memory. SUMO uses memory 1.5 times
more than that of TSVI. As run-time memory usage depends on the mini-batch size, for the two largest datasets
PMA and WPE we have used a large mini-batch size of
10,000 to stress-test the memory consumption. Among all
the datasets, WPE is observed to have the largest size in
a mini-batch. We observe that on WPE during run-time,
SUMO and TSVI consume maximum memory of around
1.8 and 1.1 GB respectively. For other datasets the memory usage is much less for both SUMO and TSVI. Thus,
SUMO is not far behind TSVI in run-time memory usage.
Growth of kt . As memory usage of SUMO increases with
kt , we experimentally note the growth of kt on NYT dataset
in Figure 3. As expected, we see a fast growth initially that
slows down gradually, reciprocating Theorem 2.
5.2.2. VARYING EXPERIMENTAL SETTINGS
Varying the order of mini-batches. We study the effect of
change in the order of the mini-batches in the training set,
keeping the test set fixed on NIPS. Figure 4 shows that both
the methods are quite stable against the change in order of
the mini-batches, but SUMO beats TSVI consistently with
an average difference of 33%.
Varying the hyper-parameters. In Figure 5, we report held-out data perplexity on NIPS by varying γ in
{0.5, 1, 2, 5}. SUMO is more stable across the variation
compared to TSVI and on average 25% better.
Varying the size of mini-batches. On NYT dataset we
report held-out data perplexity in Figure 6, by varying the
size of mini-batches in {300, 400, 500, 10000}. SUMO is
quite consistent and 35% better than TSVI on average.

SUMO
TSVI

12000

300

400
500
Mini-Batch Size

10000

Figure 6. Perplexity for different mini-batch sizes on NYT.
SUMO is more consistent than TSVI (on average 35% better).

5.3. Discussion
Significance of our experiments is that we apply SUMO
to process three real world large scale corpora using only
3GB of RAM, which is beyond the scope of the existing Monte Carlo methods. This marks a significant improvement in Monte Carlo family for learning with large
datasets. SUMO makes it possible as memory usage grows
only with kt which is not very high due to Theorem 2.
Apart from memory advantage, SUMO shows ability to
learn from large datasets on perplexity measures outperforming PF (Table 2) and state of the art TSVI (Figure
1). This affirms that reduction in memory does not deteriorate learning ability of SUMO. Efficacy of SUMO can
be attributed to the following facts. Although SUMO is sequential in nature, after initial burn-in stage (see Theorem
1) underlying model becomes equivalent to DPMM (see
Theorem 4) and SUMO makes accurate approximation of
the full posterior globally (as shown in Eq. (10), Eq. (11)).
For mini-batches processed in order, it is natural that some
mini-batches are statistically similar to each other than the
rest, SUMO effectively models this through appearnce in
order. Stability across the order and the size of the minibatches (Figure 4, 6) also establishes SUMO as a valid approach in sequential learning. Additionally, SUMO seems
to be less sensitive to the DPMM parameter (Figure 5) justifying complete Bayesian approach adopted in SUMO.

6. Conclusion
This paper introduces the ordered stick-breaking process
(OSBP), by constraining the atoms in the stick to be appearing in order. OSBP can be of independent interest
for streaming datasets. Using OSBP, we design a sequential inference based on MCMC (SUMO) for BNP models,
that requires memory order of magnitude less than MCMC
and PF, and is competitive to TSVI (Wang & Blei, 2012).
SUMO is easy to implement, and outperforms PF, and
TSVI on real life large scale datasets.

OSBP for Sequential MCMC Inference of BNP Models

Acknowledgments
We are thankful to all the reviewers for their valuable comments. The authors were partially supported by DST grant
(DST/ECA/CB/1101). Author MD was also partially supported by Google.

References
Ahmed, A., Ho, Q., Teo, C., Eisenstein, J., Smola, A., and
Xing, E. Online Inference for the Infinite Topic-Cluster
Model: Storylines from Streaming Text. In In International Conference on Artificial Intelligence and Statistics, pp. 101–109, 2011.
Andrieu, C., de Freitas, N., Doucet, A., and Jordan, M. An
introduction to MCMC for machine learning. Machine
Learning, 50:5–43, 2003.
Andrieu, C., Doucet, A., and Holenstein, R. Particle
Markov chain Monte Carlo methods. Journal of the
Royal Statistical Society: Series B (Statistical Methodology), 72:269–342, 2010.
Asuncion, A., Welling, M., Smith, P., and Teh, Y. On
smoothing and inference for topic models. In Proceedings of the Twenty-Fifth Conference on Uncertainty in
Artificial Intelligence, pp. 27–34, 2009.
Bache, K. and Lichman, M. UCI machine learning repository, 2013. URL http://archive.ics.uci.
edu/ml.
Blei, D. and Jordan, M. Variational methods for the Dirichlet process. In Proceedings of the 21st International
Conference on Machine Learning, 2004.
Broderick, T., Boyd, N., Wibisono, A., Wilson, A., and
Jordan, M. Streaming Variational Bayes. In Advances
in Neural Information Processing Systems 26, pp. 1727–
1735, 2013.
Bryant, M. and Sudderth, E. Truly Nonparametric Online Variational Inference for Hierarchical Dirichlet Processes. In Advances in Neural Information Processing
Systems 25, pp. 2708–2716, 2012.
Canini, K., Shi, L., and Griffiths, T. Online inference of
topics with latent Dirichlet allocation. In International
Conference on Artificial Intelligence and Statistics, pp.
65–72, 2009.
Caron, F., Davy, M., Doucet, A., Duflos, E., and Vanheeghe, P. Bayesian inference for linear dynamic models
with Dirichlet process mixtures. IEEE Transactions on
Signal Processing, 56:71–84, 2008.

Chen, C., Rao, V., Buntine, W., and Teh, Y. Dependent
Normalized Random Measures. In Proceedings of the
30th International Conference on Machine Learning, pp.
969–977, 2013.
Chung, Y. and Dunson, D. The local Dirichlet process.
Annals of the Institute of Statistical Mathematics, 63(1):
59–80, 2011.
Connor, R. and Mosimann, J. Concepts of independence
for proportions with a generalization of the dirichlet distribution. Journal of the American Statistical Association, 64(325):194–206, 1969.
Doucet, A., de Freitas, N., and Gordon, N. Sequential
Monte Carlo Methods in Practice. Springer-Verlag,
2001.
Escobar, M. and West, M. Bayesian density estimation and
inference using mixtures. Journal of the American Statistical Association, 90:577–588, 1995.
Fearnhead, P. Particle filters for mixture models with an
unknown number of components. Journal of Statistics
and Computing, 14:11–21, 2004.
Ferguson, T. A Bayesian analysis of some nonparametric
problems. The Annals of Statistics, 1(2):209–230, 1973.
Griffin, J. and Steel, M. Order-based dependent Dirichlet
processes. Journal of the American statistical Association, 101(473):179–194, 2006.
Hjort, N., Holmes, C., Mueller, P., and Walker, S. Bayesian
Nonparametrics: Principles and Practice. Cambridge
University Press, Cambridge, UK, 2010.
Ishwaran, H. and James, L. Gibbs sampling methods for
stick-breaking priors. Journal of the American Statistical
Association, 96(453):161–173, 2001.
Jun, S. and Coute, A. Memory (and Time) Efficient Sequential Monte Carlo. In Proceedings of the 31st International Conference on Machine Learning, 2014.
Lin, D. Online Learning of Nonparametric Mixture Models
via Sequential Variational Approximation. In Advances
in Neural Information Processing Systems 26, pp. 395–
403, 2013.
Lin, D., Grimson, E., and Fisher, J. Construction of Dependent Dirichlet Processes based on Poisson Processes. In
Advances in Neural Information Processing Systems 23,
pp. 1396–1404, 2010.
MacEachern, S. Dependent dirichlet processes. Unpublished manuscript, Department of Statistics, The Ohio
State University, 2000.

OSBP for Sequential MCMC Inference of BNP Models

Newman, D., Asuncion, A., and Smyth, P. Distributed algorithms for topic models. Journal of Machine Learning
Research, 10:1801–1828, 2009.
Pitman, J. Exchangeable and partially exchangeable random partitions. Probability Theory and Related Fields,
102(2):145–158, 1995.
Pitman, J.
Some developments of the BlackwellMacQueen urn scheme. Lecture Notes-Monograph Series, pp. 245–267, 1996.
Pitman, J. and Yor, M. The two-parameter PoissonDirichlet distribution derived from a stable subordinator.
The Annals of Probability, 25(2):855–900, 1997.
Sethuraman, J. A constructive definition of Dirichlet priors.
Statistica Sinica, 4:639–650, 1994.
Teh, Y., Jordan, M., Beal, M., and Blei, D. Hierarchical
Dirichlet processes. Journal of the American Statistical
Association, 101(476):1566–1581, 2006.
Ulker, Y., Gunsel, B., and Cemgil, A. Sequential Monte
Carlo samplers for Dirichlet process mixtures. In International Conference on Artificial Intelligence and Statistics, pp. 876–883, 2010.
Wang, C. and Blei, D. Truncation-free online variational
inference for Bayesian nonparametric models. In Advances in Neural Information Processing Systems 25, pp.
422–430, 2012.
Welling, M., Teh, Y., and Kappen, H. Hybrid variational/Gibbs collapsed inference in topic models. arXiv
preprint arXiv:1206.3297, 2012.
Williamson, S., Dubey, A., and Xing, E. Parallel Markov
Chain Monte Carlo for Nonparametric Mixture Models.
In Proceedings of the 30th International Conference on
Machine Learning, pp. 98–106, 2013.

