Combinatorial Partial Monitoring Game with
Linear Feedback and Its Applications

Tian Lin∗
Bruno Abrahao†
Robert Kleinberg†
John C.S. Lui‡
Wei Chen§
∗
Tsinghua University, Beijing, China
‡
The Chinese University of Hong Kong, Shatin, NT, Hong Kong

Abstract
In online learning, a player chooses actions to
play and receives reward and feedback from the
environment with the goal of maximizing her reward over time. In this paper, we propose the
model of combinatorial partial monitoring games
with linear feedback, a model which simultaneously addresses limited feedback, infinite outcome space of the environment and exponentially large action space of the player. We present
the Global Confidence Bound (GCB) algorithm,
which integrates ideas from both combinatorial
multi-armed bandits and finite partial monitoring
games to handle all the above issues. GCB only
requires feedback on a small set of actions and
2
achieves O(T 3 log T ) distribution-independent
regret and O(log T ) distribution-dependent regret (the latter assuming unique optimal action),
where T is the total time steps played. Moreover, the regret bounds only depend linearly on
log |X | rather than |X |, where X is the action
space. GCB isolates offline optimization tasks
from online learning and avoids explicit enumeration of all actions in the online learning part. We
demonstrate that our model and algorithm can be
applied to a crowdsourcing application leading to
both an efficient learning algorithm and low regret, and argue that they can be applied to a wide
range of combinatorial applications constrained
with limited feedback.

Proceedings of the 31 st International Conference on Machine
Learning, Beijing, China, 2014. JMLR: W&CP volume 32. Copyright 2014 by the author(s).

LINT 10@ MAILS . TSINGHUA . EDU . CN
ABRAHAO @ CS . CORNELL . EDU
RDK @ CS . CORNELL . EDU
CSLUI @ CSE . CUHK . EDU . HK
WEIC @ MICROSOFT. COM
†
§

Cornell University, Ithaca, NY 14850, USA
Microsoft Research, Beijing, China

1. Introduction
In the online learning framework, a player (or a learner) and
the environment interact with each other in discrete time
steps in the following way. At each time step, the environment generates an outcome and the player selects an action,
and when the action is applied to the environment outcome,
the player gains a reward and receives a feedback about
the environment outcome and potentially about her reward.
The player wants to learn from past feedbacks to maximize
her reward over time, or as in standard treatment, minimize
her regret, which is the difference between the reward she
could collect if she always plays the best action over time
and the reward she actually receives. We consider stochastic online learning in this paper, which means that the environment generates outcomes following a certain predetermined distribution not known to the player. The key in
designing the player’s learning algorithm is to address the
tradeoff between exploration and exploitation: the player
needs to try all possible actions (exploration) while biasing toward the actions giving her the best rewards so far
(exploitation).
Online learning has a wide range of applications and has
been extensively studied over the years in statistics and
machine learning. The multi-armed bandit (MAB) problem (Robbins, 1985) is a classical framework in online
learning in which the environment outcome in each time
step is the reward of n arms (or actions), the player’s action is to select one of the n arms to play, and the reward
the player receives, as well as her feedback, is the reward of
the selected arm. Algorithms for MAB achieve O(log T )
distribution-dependent regret (i.e. the regret
√ also depends
on the distribution of outcomes) and O( T ) distributionindependent regret, over T time steps (Auer et al., 2002).
In some applications with combinatorial structures, the
number of arms to play may be exponential in the problem

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

instance size, and MAB becomes impractical since both
its regret and its running time would be exponential in the
problem size. The combinatorial MAB (CMAB) problem
(Chen et al., 2013) was proposed to address this issue. In
CMAB, each action is a super arm, which is a set of base
arms, and once played, the outcomes of all base arms are
revealed to the player as the feedback. CMAB algorithms
can achieve the same level of regret as MAB algorithms in
terms of dependence on the time horizon T , and both the
running time and the regret of CMAB algorithms is polynomial in the problem size when assuming the existence of
a polynomial-time offline optimization oracle.
MAB and CMAB require feedback on the reward or outcome of the chosen arm, or each of its constituent base
arms in the case of CMAB. This feedback may not be
available in many applications. Partial monitoring games
are online learning models addressing the issue of limited
feedback information (Piccolboni & Schindelhauer, 2001;
Cesa-Bianchi et al., 2006; Antos et al., 2012). Existing
works focus on a finite action space X and a finite outcome
space, and allow flexible feedback structure for each action
x ∈ X . Depending on the condition governing feedback
√
2
and reward, they could achieve either Θ(T 3 ) or Θ̃( T )
distribution-independent regret in T time steps.1 However,
existing work on partial monitoring does not address the
case of exponential action space in that both the regret and
the running time of the learning algorithm depend linearly
or polynomially on the size of the action space X . Moreover, they do not address the case of infinite outcome space.
Although CMAB and current partial monitoring work address limited feedback, exponential action space, and infinite outcome space separately, some applications may require them all simultaneously. Consider the following motivating example in crowdsourcing. Suppose that a crowdsourcing platform acts as a broker between workers who
have time and skill and employers who have tasks to complete. Every day employers post tasks, and the crowdsourcing platform matches workers to tasks. The platform wants
to maximize the social welfare over time, which is the total
performance of matched worker-task pairs, and it relies on
employers and workers to provide feedback on the performance of completed tasks. However, providing task performance feedback is inconvenient or costly for employers
and workers, and in some cases may also violate privacy
concerns. Therefore, the platform can only ask employers
and workers to provide partial feedback for a small subset of completed tasks. Moreover, the action space in this
case is the set of all matchings between workers and tasks,
which is exponential in the problem size. Finally, the performance feedback may be measured as a continuous variable such as time to complete the task, payment for the task,
1

The notations Õ, Θ̃ disregard polylogarithmic factors.

etc., leading to an infinite outcome space. Thus this application requires a learning method handling limited feedback, exponential action space, and infinite outcome space
at the same time, which has not been addressed in the literature to the best of our knowledge.
In this paper, we fill this gap by combining ideas from
both CMAB and partial monitoring and providing a unified
model and algorithm addressing all the above issues. We
first extend the finite partial monitoring model with infinite
and continuous outcomes and linear feedback as follows.
We model the outcome of the environment as a vector of
bounded and continuous random variables v, thus supporting an infinite outcome space. For each action x ∈ X ,
the feedback of x on v is given by the linear transformation Mx v, where Mx is the transformation matrix of x.
The matrices Mx provide a very flexible model of limited
feedback, including the extreme that an all-zero matrix Mx
means that there is no feedback for action x. We refer this
model as a combinatorial partial monitoring game with linear feedback.
We present a general algorithm called Global Confidence
Bound (GCB) for combinatorial partial monitoring games
with linear feedback with distribution-independent re2
gret bound O(T 3 log T ) and distribution-dependent bound
O(log T ) (the latter assuming unique optimal action). One
of the key ideas of GCB is to use a small observer set of
actions for exploration. This idea combines the observer
set idea from partial monitoring with the idea of estimating
the small base arm set from CMAB. Our algorithm handles the large action space in that (a) our regret bound linearly depends on log |X | instead of |X |, and (b) our algorithm does not enumerate actions in the online learning part
but only relies on efficient problem-specific solutions to the
corresponding offline optimization tasks, similar to the way
large action spaces are handled in CMAB.
We then apply GCB to the crowdsourcing application and
show that it allows an efficient polynomial-time learning
algorithm with low regret depending linearly on log |X |,
polynomially on problem instance size, besides being sublinear in the time horizon T . It is important to point out
that our algorithm GCB not only applies to the crowdsourcing application but to a much larger class of applications.
Many matching applications, whether they are online dating brokages matching individuals, recommender systems
matching products with customers, or advertising systems
matching advertisements with users, could potentially benefit from the algorithm since they may also have constraints
limiting the feedbacks the systems may obtain. It also goes
beyond matching tasks and may work well with other combinatorial optimization tasks that has efficient offline solutions, such as online shortest path learning and optimization. Furthermore, we formulate GCB in a general setting

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

in which the reward function may not be linear in the outcome vector v, and only a continuity assumption is needed
on the expected reward function, which may further enlarge
the application range of our algorithm.
To summarize, the contributions of our paper include: (a)
we present a general online learning model and algorithm
that handle limited feedback, exponential action space and
infinite outcome space simultaneously and work with nonlinear reward functions; (b) we provide a detailed formulation and solution for partial monitoring games with linear
feedback;2 and (c) we propose an application in the domain
of crowdsourcing worker allocation, and demonstrate that
our algorithm can be applied to the application yielding an
efficient algorithm with low regret.
The rest of the paper is organized as follows. Section 2 discussed related work. Section 3 provides the details of our
model and assumptions. Section 4 presents the GCB algorithm and its regret bound. Section 5 describes the crowdsourcing application and demonstrates how GCB is applied
to the application. We conclude the paper in Section 6.
Detailed regret analysis are provided in the supplementary
material.

2. Related Work
Feedback models in online learning (Cesa-Bianchi & Lugosi, 2006) have been studied for a long time. The simplest model of feedback is a full-information game. When
one action is played, feedbacks directly include rewards
of allpactions. The regret for a full-information game
is Θ( T log |X |) (Littlestone & Warmuth, 1989; Vovk,
1990). Another well-studied feedback model is a multiarmed bandit game, introduced by (Robbins, 1985). (The
name is derived from an analogy of multiple slot machines.) In each time step one action is played, and the
reward of that arm is revealed as feedback. The tight regretpbound for adversarial multi-armed bandit games is
Θ( |X |T ) (Audibert & Bubeck, 2009). Since only one
reward is revealed while others are unknown, one faces an
exploration vs. exploitation dilemma. The UCB1 algorithm for stochastic multi-armed bandit games (Auer et al.,
2002) is a simultaneous exploration and exploitation policy, which applies a confidence bound on each arm, and
achieves a distribution-dependent regret bound of O(log T )
over time. The above literature distinguishes two kinds of
games: adversarial games and stochastic games (Bubeck
& Cesa-Bianchi, 2012), and we focus on the latter in this
paper.
2
The final paragraph in the conclusion of (Bartók et al., 2011)
mentions a similar extension to linear feedback without further
details. However, our algorithm and analysis further focus on
handling exponential action space, which is not addressed in the
framework of (Bartók et al., 2011).

A recent line of research focuses on handling combinatorial
structures in adversarial (Cesa-Bianchi & Lugosi, 2012) or
stochastic online learning (Gai et al., 2012; Chen et al.,
2013) and provides useful ideas which we incorporate here.
In (Chen et al., 2013), the authors use an offline oracle to
separate the problem-specific solver and the learning algorithm, enabling the possibility of dealing with large sets of
actions.
Another line of research aims to characterize the difficulty of learning in different feedback models. Finite partial monitoring games were first defined in (Piccolboni
& Schindelhauer, 2001). Studies in (Cesa-Bianchi et al.,
2006; Antos et al., 2012) characterize finite partial monitoring games into four categories: trivial, easy, hard, and
2
1
hopeless, with regret bounds of 0, Θ̃(T 2 ), Θ(T 3 ), and
Θ(T ) respectively. Algorithm BALATON in (Antos et al.,
1
2012) achieved Θ̃(T 2 ) assuming the local observability
property to separate different optimal actions, and CBP in
1
(Bartók et al., 2012) is proposed to switch between Õ(T 2 )
2
and Õ(T 3 ) adaptively, when the problem may be either locally or globally observable. In constrast, not only is our
model able to handle exponentially large action space, but
we are also the first to provide an O(log T ) distributiondependent regret for a globally observable game (with the
unique optimal action assumption), whereas CBP only provides an O(log T ) distribution-dependent regret for locally
observable games, which is a stronger assumption.

3. Model and Definitions
In this paper, we consider the combinatorial stochastic partial monitoring game with linear feedback, as described below. A combinatorial partial monitoring game is a repeated
game between the player and the environment at discrete
time steps t = 1, 2, · · · . Let v(t) denote the value of a
variable v at the end of time t. Before the game starts, the
environment determines a fixed probability distribution p
on [0, 1]n , where n is the dimension, and p is not revealed
to the player. At each time t, the environment samples an
independent random vector3 v(t) ∈ [0, 1]n from the fixed
distribution, and this vector is taken to be the environment’s
outcome at this time step. The random outcome vector v(t)
is not observed by the player. Meanwhile, at time t the
player chooses an action x(t) ∈ X , where X is a finite set
of all possible actions of the player. When the action x(t) is
applied to the environment outcome v(t), the player gains
a reward4 r(x(t), v(t)) ∈ R and receives a feedback y(t),
which is a linear transformation of the latent outcome v(t)
as we now explain. For every action x ∈ X , there is a
3

All vectors in the paper are column vectors.
Some prior work treats loss rather than reward. Reward and
loss are two symmetric terms, and our results apply to the case of
loss functions too after performing the appropriate sign changes.
4

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

transformation matrix Mx ∈ Rmx ×n , whose row dimension mx depends on x. At time t, the player receives the
feedback vector y(t) = Mx(t) · v(t) ∈ Rmx(t) , and this is
what we mean by “linear feedback”. Note that the actual
reward r(x(t), v(t)) may not be part of the feedback y(t)
and thus may not be observed by the player. Also Mx for
some action x could be all zeros, meaning that there is no
feedback for action x. The outcome dimension n, the action space X , the reward function r(·, ·) and transformation
matrices Mx , ∀x ∈ X form the instance of the game, and
are known to the player. For some game instances (e.g. the
crowdsourcing application of Section 5), X and Mx ’s have
certain combinatorial structure and thus they have a succinct representation, and the size of X may be exponential
to the size of the (succinctly represented) game instance.
To summarize, the game proceeds at discrete time steps t =
1, 2, . . ., and at each time t:
1. The environment samples an outcome vector v(t)
from its predetermined distribution p independently.
2. The player chooses an action x(t) from X , which
could be based on the feedback the player receives in
the previous time steps.
3. When the action x(t) is applied to the environment outcome v(t), the player gains the reward
r(x(t), v(t)), and receives the feedback y(t) =
Mx(t) · v(t).
Let v be a generic random outcome vector sampled from
the outcome distribution p. As is common, we use the
expected regret metric to measure the performance of the
player. Given a time horizon T , the expected regret, or
simply regret at time T , is defined as:
R(T ) = T max E [r(x, v)] −
x∈X

T
X

E [r(x(t), v(t))]. (1)

t=1

In the first term above, the expectation is taken from the
distribution of v, and it represents the reward the player
would get if she always played the action that yields the
maximum expected reward at each time step. In the second
term, the expectation is taken from the distribution of v(t)
and the possible randomness of the player’s algorithm, and
it represents the expected reward the player actually gains
by time T when running her algorithm.
Let ν = E [v] denote the vector of expected values of
v. From Equation (1), we see that what we are interested
in is the expected reward of playing an action x, namely
E [r(x, v)], where the expectation is taken over the distribution of v. In this paper, we assume that the above expected reward is a function of x and the expected outcome
vector ν of v, and thus we define r(x, ν) = E [r(x, v)].
This assumption is always satisfied if the reward function
r(x, v) is a linear function of v, or if the full distribution

of v is determined by its mean vector ν, as in the case of a
vector of independent Bernoulli random variables. Let x∗
be the optimal action for the expected reward under the expected outcome vector ν, i.e. x∗ = maxx∈X r(x, ν). Then
we can rewrite the regret in Equation (1) as follows:
R(T ) =T · r(x∗ , ν) −

T
X

E [r(x(t), ν)],

(2)

t=1

where the expectation in the second term is taken over the
randomness of x(t), which could come from either the random feedback the player received in the previous time steps
or the randomness in the player’s algorithm itself.
3.1. Assumptions
In this section, we provide and justify two technical assumptions needed for our proposed algorithm to work.
After action x(t) is played at time t, the feedback y(t) is a
linear transformation of the outcome v(t), and thus the information about the environment outcome is distorted. To
retrieve an estimate of v(t), we assume the existence of
a global observer set, which is defined below following a
similar definition in (Piccolboni & Schindelhauer, 2001).
Definition 3.1 (Global Observer Set). For a set of actions
σ = {x1 , x2 , · · · , x|σ| } ⊂ X , we stack5 their transforP|σ|
mation matrices to obtain a ( i=1 m
 xi )-by-n block matrix Mσ = Mx1 ; Mx2 ; · · · ; Mx|σ| . We say that σ is
a global observer set if Mσ is of full column rank, i.e.
rank(Mσ ) = n. This implies that the Moore-Penrose
pseudoinverse Mσ+ satisfies Mσ+ Mσ = In , where In is an
n-by-n identity matrix.
Our first assumption is thus:
• Existence of global observer set. We assume that
there exists a global observer set σ in the partial monitoring game with the linear feedback transformation
matrices Mx for all x ∈ X .
The above assumption is reasonable, since if it does not
hold, it means that even if we are allowed to play all possible actions in X on the same given outcome v, we cannot
recover the value of v. This would mean that we may not
be able to detect the difference between the rewards on different actions and may not achieve sublinear regret. This is
similar to the case of the hopeless problem class with regret
no better than Θ(T ) (Cesa-Bianchi et al., 2006).
When the above assumption holds, one can systematically
find a global observer set σ with |σ| ≤ n. For example,
we can add an action x into σ if it strictly increases the
5

Notation (A; B; C) means stacking up matrix A on top of
B and then on top of C, where A, B, and C have same column
dimensions.

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

rank of the resulting Mσ , until Mσ reaches the full rank
n. As a consequence, the size of the global observer set
is small. Note that the above assumption implies that we
do not require feedback for any actions outside the global
observer set σ.
Our second assumption is on the continuity of the expected
reward function.
• Continuity of the expected reward function. We assume the expected reward function is Lipschitz continuous in its second variable, with Lipschitz constant L > 0; that is, for all x ∈ X , for any two
mean outcome vectors ν 1 , ν 2 ∈ [0, 1]n , we have
|r(x, ν 1 ) − r(x, ν 2 )| ≤ Lkν 1 − ν 2 k2 . 6
The above continuity assumption is also a reasonable
assumption, since without such an assumption, a small
change in the mean outcome vector may result in an arbitrarily large change in the expected reward, which means
that it is very difficult to control the regret bound when one
has to learn the mean outcome vector over time. The assumption certainly holds when the reward function is a linear function of the outcome vector.
The above continuity assumption, together with the
bounded support of the distribution of v, also implies that
the expect reward in a given game instance is bounded. In
fact, for each x ∈ X and each ν ∈ [0, 1]n , |r(x, ν)| ≤
|r(x, 0)| + |r(x,
√ ν) − r(x, 0)| ≤ |r(x, 0)| + Lkν − 0k2 ≤
|r(x,
0)|
+
L
n. Thus, |r(x, ν)| ≤ maxx∈X |r(x, 0)| +
√
L n. Let Rmax = maxx1 ,x2 ∈X ,ν∈[0,1]n |r(x1 , ν) −
r(x2 , ν)| be the maximum difference in expected reward
among actions for any possible outcome distribution. We
will use Rmax in our regret bound later.
3.2. Relationship with finite partial monitoring game
It is easy to see that our model encompass MAB, fullinformation game, and CMAB as special cases, while our
model focuses on limited feedback not addressed in these
other models, as already discussed in the introduction.
Thus, we only provide some further comparison with the
finite partial monitoring game model.
The finite stochastic partial monitoring game (Bartók et al.,
2011) generalizes the MAB and the full-information game
and focuses on partial feedback information. It consists of
N actions and M possible outcomes. At each time t the
player selects one action I(t) and the environment samples one outcome J(t) from a predetermined distribution,
and the player incurs a loss L(I(t), J(t)) and receives a
feedback H(I(t), J(t)) ∈ Σ, where Σ is a finite sym6
For technical reasons, define φ(ν) = max(min(ν, ~1), ~0)
to adjust ν to the nearest vector in [0, 1]n , and r(x, ν) =
r(x, φ(ν)), ∀ν ∈ Rn \ [0, 1]n to keep Lipschitz continuity
throughout Rn .

bol set, L is called the loss matrix and H is called the
feedback matrix. In our setting, we could model the outcome vector as v ∈ {ei | i = 1, 2, . . . , M }, where ei is
the M -dimensional 0-1 vector with only the i-th entry being 1. The transformation matrix Mx is the signal matrix
of action x defined in (Bartók et al., 2011). The reward
function r(x, v) = −L(x, ·)v, where L(x, ·) is the row
of L corresponding to action x. Since the reward function is linear, the continuity of the expected reward function holds. Our assumption on the existence of the global
observer set is slightly stronger than the global observable
property in (Piccolboni & Schindelhauer, 2001) to accommodate the more general class of nonlinear reward functions. Our model is more general than the finite stochastic
partial monitoring game, in that it allows infinite outcome
spaces, general linear transformation from outcomes to observations, and possibly non-linear reward functions.

4. Learning Algorithm GCB
Our learning algorithm integrates ideas from both CMAB
and partial monitoring. In CMAB, in order to handle exponentially large action space, the algorithm utilizes a small
set of base arms and their outcome estimates to derive the
rewards of all actions. In partial monitoring, in order to
handle limited feedback, it uses observer sets so that feedback from actions in an observer set helps in estimating
rewards of other actions. In our combinatorial partial monitoring model, we combine the above ideas and use the
global observer set σ as defined in Section 3. The global
observer set both helps to estimate rewards of other nonobservable actions as in partial monitoring, and handles exponentially large action space because it is small.
More specifically, given an observer set σ
=
{x1 , x2 , · · · , x|σ| }, when the player plays these actions at
time steps t1 , t2 , · · · , t|σ| , the environment produces sample outcomes v(t1 ), v(t2 ), · · · , v(t|σ| ), and the
 feedbacks
can be stacked as y(t1 ); y(t2 ); · · · ; y(t|σ| ) = ~y(t) at
final step t = t|σ| . From the definition of σ, we can denote
the inverse function as I(Mσ , ~y) = Mσ+ ~y. (Recall that
Mσ+ denotes the Moore-Penrose pseudoinverse of the
stacked matrix Mσ .) After the inversion, the estimate ṽ(t)
of outcomes is obtained at time t: ṽ(t) = I(Mσ , ~y(t)).
It is easy to check that E [ṽ(t)] = ν, which implies that
we can use multiple independent values of ṽ(t) to obtain
an accurate estimate of ν. We call the above one round
of estimation or one round of exploration of the player.
Our algorithm invokes multiple rounds of exploration to
obtain an accurate estimate of ν, which in turn helps us to
estimate the rewards of all actions.
√
Denote noise ε(t) = v(t) − ν, thus kε(t)k2 ≤ n. Since
Mσ+ Mσ = In and Mσ+ = (Mσ| Mσ )−1 Mσ| , the estimated

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

error of ṽ(t) is bounded as
kṽ(t) − E [ṽ(t)]k2 = kMσ+ ~y(t) − Mσ+ Mσ νk2



= Mσ+ · Mx1 ε(t1 ); · · · ; Mx|σ| ε(t|σ| ) 2




|σ|
X

 |
−1
|

Mxi Mxi ε(ti )
= (Mσ Mσ )



i=1
2




|σ|
X

 |
−1
|

(Mσ Mσ )
Mxi Mxi (ν i − ν 0 )
≤
max


n
ν 0 ,ν 1 ,··· ,ν |σ| ∈[0,1] 

i=1

2

|σ|


√ X |
(Mσ Mσ )−1 Mx| Mxi  .
≤ n
i
2
i=1

P|σ|
Let βσ = max k(Mσ| Mσ )−1 i=1 Mx|i Mxi (ν i − ν 0 )k2 ,
where the max is taken from ν 0 , ν 1 , · · · , ν |σ| ∈ [0, 1]n .
By the above derivation, we see that βσ is a constant of the
game instance independent of the outcome distribution p,
and bounds the error of estimated outcome ṽ(t). Henceforth, we use the simple error bound kṽ(t) − νk2 ≤ βσ in
the rest of this paper.
We present our Global Confidence Bound Algorithm
(GCB) in Algorithm 1. Variable nσ is a counter recording
the number of rounds of exploration that have been played
so far. GCB alternates between exploration and exploitation as follows. At the beginning it executes one round
of exploration (in |σ| time steps) to initialize the empirical
mean of outcome vector ν̂. Then at a time step t ≥ 1, it
computes action x̂ that provides the best expected reward
on ν̂ (line 6) and x̂− that provides the second best expected
reward (line 7). We remark that these two lines rely on efficient problem-specific offline solutions that overcome the
problem of exponentially many actions (See Section 5 for
efficient solutions for the crowdsourcing application). Enumeration of all actions in X occurs nowhere else in the algorithm, and thus there is no dependency on the size of X
in the running time of GCB other than lines 6 and 7.
Line 8 includes the key conditions deciding whether at
time step t we should do exploration or exploitation. First,
q

αfX (t)
is a global confidence bound,
nσ
24L2 βσ2 and frequency function fX (t)

where we set α =
= ln t + 2 ln |X |
for our analysis. This confidence bound is used to detect whether the estimated global optimal and second optimal solutions are significantly separated (first condition
in line 8), and if so we are confident that we can exploit
on the current optimal x̂. Unlike UCB1 in (Auer et al.,
2002), CUCB in (Chen et al., 2013) or CBP in (Bartók
et al., 2012), our confidence bound is not on individual actions or base arms, but on the global optimal action. The
second condition in line 8 is needed for our distributionindependent regret bound, and it guarantees that even if
the difference of the estimated expected reward of the cur-

Algorithm 1 GCB
Require: σ, α, fX (t); ∀x ∈ X , r(x, ·), Mx .
1: Initialize t ← 0, nσ ← 0
2: loop
3:
if t = 0 then
{initialize ν̂}
4:
state ← begin exploration
5:
else
6:
x̂ = argmaxx∈X r(x, ν̂)
7:
x̂− = argmaxx∈X \{x̂} r(x, ν̂)


q
αfX (t)
−
8:
if r(x̂, ν̂) − r(x̂ , ν̂) >
nσ


2
or nσ > t 3 fX (t) then
9:
state ← exploitation
10:
else
11:
state ← begin exploration
12:
end if
13:
end if
14:
if state = begin exploration then
15:
{exploration phase:}
16:
for s ← 1; s ≤ |σ|; s ← s + 1 do
17:
play xs in observer set σ, and observe ys
18:
if s = |σ| then
19:
nσ ← nσ + 1

~ynσ = y1 ; y2 ; · · · ; y|σ|
20:
21:
ṽnσ = I(M
{estimate outcomes}
Pnσσ, ~ynσ )
ṽj
{take average}
22:
ν̂ = n1σ j=1
23:
end if
24:
t←t+1
25:
state ← in exploration
26:
end for
27:
else
28:
{exploitation phase:}
29:
play action x̂
30:
t←t+1
31:
end if
32: end loop

rent best and second best actions remains very small, which
could be true when there are multiple optimal actions, our
algorithm will avoid endlessly repeating the exploration
phase and will start exploitation if it knows that enough
rounds of exploration have been done. The frequency function fX (t) includes a term of 2 ln |X |, which typically does
not appear in confidence bounds in online learning algorithms. This is another key aspect of our algorithm to make
our regret dependent on ln |X | instead of |X |.
In lines 15–26, GCB executes one round of exploration as
a batch in |σ| consecutive time steps, as we already explained. Lines 29–30 are for the simple exploitation phase,
in which the current optimal action x̂ is played. Note that
GCB does not need feedback from playing x̂. It only requires feedback for the actions in the global observer set,

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

and the feedbacks for these actions are only required to
guarantee that when stacking up their transformation matrices together the resulting matrix Mσ is of full column
rank (Definition 3.1).
A few remarks about the algorithm are now in order. First,
repeated exploration of a single global observer set σ is for
the ease of algorithm presentation and regret analysis. In
practice, one can find multiple global observer sets and explore them in order. The regret bound for such exploration
is essentially the same.
Second, GCB requires efficient offline algorithms for both
computing the best action and the second best action, given
an expected outcome vector. It is reasonable to assume the
existence of an efficient offline algorithm for computing the
optimal solution, otherwise one cannot require sublinear
regret that compares with the optimal action. For computing the second best action, one may be able to achieve it
by disabling the best action in some way and then finding
the best action in the remaining actions. (The example in
Section 5 is done in this way.) Moreover, computing the
second best action in line 7 can be replaced by a decision
problem — deciding if there is an action
q besides x̂ that has

expected reward at least r(x̂, ν̂) − αfnXσ(t) . In any case,
these algorithms are problem-specific and require domain
expertise on the application. GCB separates the concern
of offline optimization from the online learning part. In
contrast, other partial monitoring algorithms such as BALATON in (Bartók et al., 2011) and CBP in (Bartók et al.,
2012) rely on explicit enumeration of all actions in their
online learning part, and thus do not efficiently address the
issue of exponentially large action space.
4.1. Results on Regret Bound
Recall the following problem-specific constants: the size of
the global observer set |σ|; parameter L from the continuity
assumption; error bound βσ on estimated outcome; and the
maximum difference in expected reward Rmax .
Theorem 4.1 and 4.2 provide the distribution-independent
and distribution-dependent regret bounds for Algorithm 1.
Theorem 4.1 (Distribution-independent bound). Let
fX (t) = ln t+2 ln |X |, and α = 24L2 βσ2 . The distributionindependent regret bound of Algorithm 1 is:
2
2
8
R(T ) ≤Rmax |σ| · T 3 (ln T + 2 ln |X |) + Lβσ T 3
3


4e2
+ Rmax |σ| +
.
(3)
|X |4

For distribution-dependent bound for an outcome distribu-

tion p with mean outcome vector ν, we define:
∆x =r(x∗ , ν) − r(x, ν),

(4)

∆max = max{∆x : x ∈ X },

(5)

∆min = min{∆x : x ∈ X , ∆x > 0}.

(6)

Theorem 4.2 (Distribution-dependent bound). Let
fX (t) = ln t + 2 ln |X |, and α = 24L2 βσ2 . If the instance
has a unique optimal action under outcome distribution p
and mean outcome vector ν, the distribution-dependent
regret bound of Algorithm 1 is:

X
4e2
96L2 βσ2
(ln
T
+
2
ln
|X
|)
+
ln T
R(T ) ≤
∆x ·
∆2min
|X |4
x∈σ

 2

3e
941L3 βσ3
+1 + ∆max ·
+
.
(7)
|X |4
∆3min
Theorem 4.1 shows that our algorithm achieves
2
O(T 3 ln T ) distribution-independent regret, which is
2
close to the theoretical bound of Θ(T 3 ) for partial
monitoring games with the global observability property
(Antos et al., 2012). Theorem 4.2 shows that our algorithm achieves O(log T ) distribution-dependent regret
(assuming unique optimal action), which matches the
theoretical lower bound for the classical MAB problem
(Lai & Robbins, 1985).
From both the distribution-independent and distributiondependent regrets, we see that the regret bounds depend
linearly on ln |X |. When comparing with regret bounds
of existing work on partial monitoring, such as Theorem 1
in (Bartók et al., 2012) for the CBP algorithm, we see that
they have terms explicitly summing over all actions x ∈ X ,
leading to regret bounds linearly dependent on |X |. We are
able to achieve this because we use a small global observer
set σ (recall that |σ| ≤ n), and we include a term 2 ln |X |
in our frequency function fX (t) so that we use more explorations to reduce the error probability in finding the optimal
action x̂, thus avoiding paying a regret linear in |X | for potentially exploiting a wrong x̂.
In the distribution-dependent bound, we require that there
is a unique optimal action in the problem instance. This is
because of our weak assumption of the global observer set:
we only assume feedbacks for the global observer set. To
distinguish two actions we have to play the global observer
set repeatedly and pay high regrets, but if the two are indeed both optimal we can never tell them apart and have
to keep paying high regrets for exploration. In contrast,
in MAB, CMAB and the more general partial monitoring
games with the local observability property (Antos et al.,
2012), the player is able to play multiple close-to-optimal
actions for both exploration and exploitation purposes at
the same time: if they are indeed all optimal, playing any of

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

them is a good exploitation, and if they are different playing
them will eventually tell them apart with a low regret.
To summarize, GCB algorithm employs the following features to achieve our goal: (a) GCB employs a global confidence bound condition, avoiding comparing the reward
differences between all pairs of actions; (b) GCB separates
the concern of offline optimization from online learning,
and eliminates steps that require enumerating all actions
from the online learning part; (c) GCB trades off more explorations for a lower error probability in exploitation to
avoid the potential for such errors to incur a high regret
cost linear to the action space size.

5. Crowdsourcing Application
In this section, we demonstrate our combinatorial partial
monitoring model and the GCB algorithm using the following crowdsourcing application. Consider a crowdsourcing platform providing matchings between N workers and
M tasks each day. For simplicity of description, we assume that N ≤ M and that these M tasks come from
the same employer. Let random variable vij be the performance of worker i on task j. The performance could be
measured as time to complete the task, proportion of the
task completed, wage paid to the worker, or some performance evaluation value given by the employer. The actual
form is unimportant and we assume it to be a continuous
random variable normalized to the range [0, 1]. Therefore,
the outcome vector can be represented by the
| random vector v = v11 , v12 , · · · , v1M , v21 , · · · , vN M ∈ [0, 1]N M .
The action space is the set of matchings between workers and tasks in the complete bipartite graph connecting
workers and tasks. In vector form, an action
is a vec|
tor x = z11 , z12 , · · · , z1M , z21 · · · , zN M ∈ {0, 1}N M
PN
PM
with i=1 zij ≤ 1 and j=1 zij ≤ 1, where zij represents whether worker i and task j are matched. Thus, the
size of the action space X is exponential in N and M .
The system’s reward is defined as r(x, v) = x| v, i.e.
the sum of performance of all matched worker-task pairs,
which is often referred to as the social welfare. Because of
linearity, we have r(x, ν) = E [r(x, v)] = r(x, ν), where
ν = E [v], and the continuity assumption thus holds.
If we apply the CMAB framework to this problem, we
would require feedback of daily performance for every
worker-task pair. However, reporting daily performance
for every worker-task pair is costly for the employer, and
sometimes also raises privacy concerns, and thus the platform cannot expect to collect vij for all matched workertask pairs every day. On the other hand, providing some
feedback to the platform could help it to improve the
matching in the future, which is beneficial to both employers and workers. Therefore, it is reasonable to assume that
employers and workers would agree to provide partial feed-

back for at least a small set of matchings. For each matching that the platform receives feedback, we assume that the
requested feedback from the employer consists of a single
value, which is the aggregate reward of s matched workertask pairs. With this setting, the transformation matrix Mx
contains a single row with exactly s 1’s and all other entries
are 0, and Mx x = s.
It is easy to find a small global observer set such that their
stacked matrix Mσ is of full column rank. For example,
if s = 1, Mσ could simply be the identity matrix, which
means that each action in the observer set is used for sampling the outcome of one action. If the application requires
1 < s < N to avoid revealing both individual workers’
performance and the total performance received by the employer in a day, we can also construct the global observer
set with a full-column-rank matrix Mσ . A simple construction is given in the supplementary material.
Therefore, we have modeled the crowdsourcing application
as a problem instance in the framework of combinatorial
partial monitoring with linear feedback, and we can apply
our GCB algorithm to the application. For this application, the offline problem of finding the optimal action is
equivalent to finding a matching that maximizes the total
expected reward given the expected reward on each edge,
which is exactly the maximum weighted matching problem, and thus can be efficiently solved. (The algorithm
appears in many textbooks, e.g. (Kozen, 1992).) The offline problem of finding the second best matching can also
be solved. We remove one edge in the optimal matching,
and find the maximum weighted matching in the remaining graph. We then repeat this for all edges in the optimal matching and among the matchings computed select
the one with the maximum weight. Therefore, both computing the best and the second best actions are efficient.
Hence, Theorems 4.1 and 4.2 apply to our application. The
problem-specific
constants
√ are: |σ| = N M , Rmax = N ,
√
L = N , and βσ = N M for the case of s = 1. In
summary, GCB can be applied to our crowdsourcing application setting, leading to low regret sublinear in T and
polynomial in the offline problem instance size.

6. Future Work
Our work can be extended in several directions. One direction is to incorporate problems with only approximate
algorithms for the offline optimization task, which is similar to the treatment in CMAB (Chen et al., 2013). Another
direction is to extend the model to include more flexible
observer sets, such that we could more tightly integrate exploration and exploitation. Moreover, how to efficiently
compute the global observer set σ with both small |σ| and
βσ in general needs to be addressed in the future.

Combinatorial Partial Monitoring Game with Linear Feedback and Its Applications

References
Antos, András, Bartók, Gábor, Pál, Dávid, and Szepesvári,
Csaba.
Toward a classification of finite partialmonitoring games. Theoretical Computer Science, 2012.

Littlestone, Nick and Warmuth, Manfred K. The weighted
majority algorithm. In Foundations of Computer Science, 1989., 30th Annual Symposium on, pp. 256–261.
IEEE, 1989.

Audibert, Jean-Yves and Bubeck, Sébastien. Minimax
policies for adversarial and stochastic bandits. In COLT,
2009.

Piccolboni, Antonio and Schindelhauer, Christian. Discrete
prediction games with arbitrary feedback and loss. In
Computational Learning Theory, pp. 208–223. Springer,
2001.

Auer, Peter, Cesa-Bianchi, Nicolò, and Fischer, Paul.
Finite-time analysis of the multiarmed bandit problem.
Machine learning, 47(2-3):235–256, 2002.

Robbins, Herbert. Some aspects of the sequential design
of experiments. In Herbert Robbins Selected Papers, pp.
169–177. Springer, 1985.

Bartók, G., Zolghadr, N., and Szepesvári, Cs. An adaptive algorithm for finite stochastic partial monitoring (extended version). In ICML, pp. 1–20, June 2012.

Vovk, Volodimir G. Aggregating strategies. In Proc. Third
Workshop on Computational Learning Theory, pp. 371–
383. Morgan Kaufmann, 1990.

Bartók, Gábor, Pál, Dávid, and Szepesvári, Csaba.
Minimax regret of finite partial-monitoring games in
stochastic environments. Journal of Machine Learning
Research-Proceedings Track, 19:133–154, 2011.
Bubeck, Sébastien and Cesa-Bianchi, Nicolò. Regret analysis of stochastic and nonstochastic multi-armed bandit
problems. Foundations and Trends in Machine Learning, 5(1):1–122, 2012.
Cesa-Bianchi, Nicolo and Lugosi, Gábor. Prediction,
learning, and games. Cambridge University Press, 2006.
Cesa-Bianchi, Nicolo and Lugosi, Gábor. Combinatorial
bandits. Journal of Computer and System Sciences, 78
(5):1404–1422, 2012.
Cesa-Bianchi, Nicolo, Lugosi, Gábor, and Stoltz, Gilles.
Regret minimization under partial monitoring. Mathematics of Operations Research, 31(3):562–580, 2006.
Chen, Wei, Wang, Yajun, and Yuan, Yang. Combinatorial multi-armed bandit: General framework and applications. In Proceedings of the 30th International Conference on Machine Learning (ICML-13), pp. 151–159,
2013.
Gai, Yi, Krishnamachari, Bhaskar, and Jain, Rahul. Combinatorial network optimization with unknown variables:
Multi-armed bandits with linear rewards and individual observations. IEEE/ACM Trans. Netw., 20(5):1466–
1478, October 2012. ISSN 1063-6692.
Kozen, Dexter. The design and analysis of algorithms.
Springer, 1992.
Lai, Tze Leung and Robbins, Herbert. Asymptotically efficient adaptive allocation rules. Advances in applied
mathematics, 6(1):4–22, 1985.

